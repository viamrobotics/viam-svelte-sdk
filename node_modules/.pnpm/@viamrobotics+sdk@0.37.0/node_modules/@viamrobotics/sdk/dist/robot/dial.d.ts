import type { AccessToken, Credential } from '../main';
import { RobotClient } from './client';
/** Options required to dial a robot via gRPC. */
export interface DialDirectConf {
    host: string;
    credentials?: Credential | AccessToken;
    disableSessions?: boolean;
    noReconnect?: boolean;
    reconnectMaxAttempts?: number;
    reconnectMaxWait?: number;
    reconnectAbortSignal?: {
        abort: boolean;
    };
    dialTimeout?: number;
}
interface ICEServer {
    urls: string;
    username?: string;
    credential?: string;
}
/**
 * Options required to dial a robot via WebRTC.
 *
 * - `reconnectMaxAttempts` value should be a positive int; default is 10.
 * - `reconnectMaxWait` value should be a positive int; default is positive
 *   infinity.
 */
export interface DialWebRTCConf {
    host: string;
    credentials?: Credential | AccessToken;
    disableSessions?: boolean;
    noReconnect?: boolean;
    reconnectMaxAttempts?: number;
    reconnectMaxWait?: number;
    reconnectAbortSignal?: {
        abort: boolean;
    };
    serviceHost?: string;
    signalingAddress: string;
    iceServers?: ICEServer[];
    priority?: number;
    dialTimeout?: number;
}
/** Options required to dial a robot. */
export type DialConf = DialDirectConf | DialWebRTCConf;
/**
 * Connect to a robot via WebRTC or gRPC and return a RobotClient after
 * connecting successfully.
 *
 * The initial connection method is determined by whether a
 * {@link DialWebRTCConf} or {@link DialDirectConf} is passed in as the first
 * argument.
 *
 * Reconnect is enabled by default and disabled with `noReconnect`. When
 * enabled, this function will re-attempt to reconnect if initial connection is
 * unsuccessful using backoff.
 *
 * If `noReconnect` is specified and connecting via WebRTC fails, then this
 * function will automatically re-attempt to connect via gRPC directly.
 */
export declare const createRobotClient: (conf: DialConf) => Promise<RobotClient>;
export {};
