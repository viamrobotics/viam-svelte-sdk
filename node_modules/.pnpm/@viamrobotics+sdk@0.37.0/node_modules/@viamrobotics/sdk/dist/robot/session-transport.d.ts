import type { AnyMessage, Message, MethodInfo, PartialMessage, ServiceType } from '@bufbuild/protobuf';
import { type ContextValues, type StreamResponse, type Transport, type UnaryResponse } from '@connectrpc/connect';
import type SessionManager from './session-manager';
export default class SessionTransport implements Transport {
    protected readonly deferredTransport: () => Transport;
    protected readonly sessionManager: SessionManager;
    constructor(deferredTransport: () => Transport, sessionManager: SessionManager);
    private getSessionMetadata;
    unary<I extends Message<I> = AnyMessage, O extends Message<O> = AnyMessage>(service: ServiceType, method: MethodInfo<I, O>, signal: AbortSignal | undefined, timeoutMs: number | undefined, header: HeadersInit | undefined, message: PartialMessage<I>, contextValues?: ContextValues): Promise<UnaryResponse<I, O>>;
    stream<I extends Message<I> = AnyMessage, O extends Message<O> = AnyMessage>(service: ServiceType, method: MethodInfo<I, O>, signal: AbortSignal | undefined, timeoutMs: number | undefined, header: HeadersInit | undefined, input: AsyncIterable<PartialMessage<I>>, contextValues?: ContextValues): Promise<StreamResponse<I, O>>;
}
