import type { Transport } from '@connectrpc/connect';
import { AppClient } from './app-client';
import { BillingClient } from './billing-client';
import { DataClient } from './data-client';
import { MlTrainingClient } from './ml-training-client';
import { ProvisioningClient } from './provisioning-client';
import { type Credentials } from './viam-transport';
export interface ViamClientOptions {
    serviceHost?: string;
    credentials: Credentials;
}
/** Instantiate a connected gRPC client that interfaces with Viam app. */
export declare const createViamClient: ({ serviceHost, credentials, }: ViamClientOptions) => Promise<ViamClient>;
interface ViamClientMachineConnectionOpts {
    host?: string;
    id?: string;
}
/** A gRPC client for method calls to Viam app. */
export declare class ViamClient {
    private transport;
    private credentials;
    readonly dataClient: DataClient;
    readonly appClient: AppClient;
    readonly mlTrainingClient: MlTrainingClient;
    readonly provisioningClient: ProvisioningClient;
    readonly billingClient: BillingClient;
    constructor(transport: Transport, credentials: Credentials);
    connectToMachine({ host, id, }: ViamClientMachineConnectionOpts): Promise<import("../robot").RobotClient>;
}
export {};
