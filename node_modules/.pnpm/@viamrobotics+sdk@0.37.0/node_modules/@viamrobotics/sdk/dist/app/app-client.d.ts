import type { Struct } from '@bufbuild/protobuf';
import { type Transport } from '@connectrpc/connect';
import { PackageType } from '../gen/app/packages/v1/packages_pb';
import { APIKeyWithAuthorizations, Authorization, AuthorizedPermissions, CreateKeyFromExistingKeyAuthorizationsResponse, CreateKeyResponse, CreateModuleResponse, Fragment, FragmentVisibility, GetRobotPartLogsResponse, GetRobotPartResponse, ListOrganizationMembersResponse, Location, LocationAuth, Model, Module, Organization, OrganizationIdentity, OrganizationInvite, OrgDetails, RegistryItem, RegistryItemStatus, Robot, RobotPart, RobotPartHistoryEntry, RotateKeyResponse, RoverRentalRobot, Visibility } from '../gen/app/v1/app_pb';
import type { LogEntry } from '../gen/common/v1/common_pb';
/**
 * Creates an Authorization object from auth details.
 *
 * @param organizationId The ID of the organization to create the role under
 * @param entityId The ID of the entity the role belongs to (e.g., a user ID)
 * @param role The role to add ("owner" or "operator")
 * @param resourceType The type of resource to create the role for ("robot",
 *   "location", or "organization")
 * @param identityType The type of identity that the identity ID is (e.g., an
 *   api-key)
 * @param resourceId The ID of the resource the role is being created for
 */
export declare const createAuth: (organizationId: string, entityId: string, role: string, resourceType: string, identityType: string, resourceId: string) => Authorization;
/**
 * Creates an Authorization object specifically for a new API key.
 *
 * @param organizationId The ID of the organization to create the role under
 * @param role The role to add ("owner" or "operator")
 * @param resourceType The type of resource to create the role for ("robot",
 *   "location", or "organization")
 * @param resourceId The ID of the resource the role is being created for
 */
export declare const createAuthForNewAPIKey: (organizationId: string, role: string, resourceType: string, resourceId: string) => Authorization;
/**
 * Creates a new AuthorizedPermissions object
 *
 * @param resourceType The type of the resource to check permissions for
 * @param resourceId The ID of the resource to check permissions for
 * @param permissions A list of permissions to check
 * @returns The AuthorizedPermissions object
 */
export declare const createPermission: (resourceType: string, resourceId: string, permissions: string[]) => AuthorizedPermissions;
export declare class AppClient {
    private client;
    constructor(transport: Transport);
    /**
     * Obain a user's ID from their email address.
     *
     * @param email The email address of the user
     * @returns The user's ID
     */
    getUserIDByEmail(email: string): Promise<string>;
    /**
     * Create a new organization.
     *
     * @param name The name of the new organization
     * @returns The new organization
     */
    createOrganization(name: string): Promise<Organization | undefined>;
    /**
     * List all organizations.
     *
     * @returns The organization list
     */
    listOrganizations(): Promise<Organization[]>;
    /**
     * List all organizations with access to a particular location.
     *
     * @param locationId The ID of the location to query
     * @returns The list of locations with access to the requested location
     */
    getOrganizationsWithAccessToLocation(locationId: string): Promise<OrganizationIdentity[]>;
    /**
     * List all organizations associated with a user.
     *
     * @param userId The ID of the user to query
     * @returns The list of locations the requested user has access to
     */
    listOrganizationsByUser(userId: string): Promise<OrgDetails[]>;
    /**
     * Get details about an organization.
     *
     * @param organizationId The ID of the organization
     * @returns Details about the organization, if it exists
     */
    getOrganization(organizationId: string): Promise<Organization | undefined>;
    /**
     * Find out if an organization namespace is available.
     *
     * @param namespace The namespace to query for availability
     * @returns A boolean indicating whether or not the namespace is available
     */
    getOrganizationNamespaceAvailability(namespace: string): Promise<boolean>;
    /**
     * Updates organization details.
     *
     * @param organizationId The id of the organization to update
     * @param name Optional name to update the organization with
     * @param publicNamespace Optional namespace to update the organization with
     * @param region Optional region to update the organization with
     * @param cid Optional CRM ID to update the organization with
     * @returns The updated organization details
     */
    updateOrganization(organizationId: string, name?: string, publicNamespace?: string, region?: string, cid?: string): Promise<Organization | undefined>;
    /**
     * Deletes an organization.
     *
     * @param organizationId The id of the organization to delete
     */
    deleteOrganization(organizationId: string): Promise<void>;
    /**
     * Lists organization memebers and outstanding invites.
     *
     * @param organizationId The id of the organization to query
     * @returns An object containing organization members, pending invites, and
     *   org ID
     */
    listOrganizationMembers(organizationId: string): Promise<ListOrganizationMembersResponse>;
    /**
     * Creates a new invitation to join an organization.
     *
     * @param organizationId The id of the organization to create the invite for
     * @param email The email address of the user to generate an invite for
     * @param authorizations The authorizations to associate with the new invite
     * @param sendEmailInvite Bool of whether to send an email invite (true) or
     *   automatically add a user. Defaults to true
     * @returns The organization invite
     */
    createOrganizationInvite(organizationId: string, email: string, authorizations: Authorization[], sendEmailInvite?: boolean): Promise<OrganizationInvite | undefined>;
    /**
     * Updates authorizations for an existing org invite.
     *
     * @param organizationId The id of the organization
     * @param email The email address associated with the invite
     * @param addAuthsList List of authorizations to add to the invite
     * @param removeAuthsList List of authorizations to remove from the invite
     * @returns The organization invite
     */
    updateOrganizationInviteAuthorizations(organizationId: string, email: string, addAuthsList: Authorization[], removeAuthsList: Authorization[]): Promise<OrganizationInvite | undefined>;
    /**
     * Removes a member from an organization.
     *
     * @param organizationId The ID of the organization
     * @param userId The ID of the user
     */
    deleteOrganizationMember(organizationId: string, userId: string): Promise<void>;
    /**
     * Deletes a pending organization invite.
     *
     * @param organizationId The ID of the organization
     * @param email The email associated with the invite to delete
     */
    deleteOrganizationInvite(organizationId: string, email: string): Promise<void>;
    /**
     * Resends a pending organization invite.
     *
     * @param organizationId The ID of the organization
     * @param email The email associated with the invite to resend
     * @returns The invite
     */
    resendOrganizationInvite(organizationId: string, email: string): Promise<OrganizationInvite | undefined>;
    /**
     * Creates a new location.
     *
     * @param organizationId The ID of the organization to create the location
     *   under
     * @param name The name of the location to create
     * @param parentLocationId Optional name of a parent location to create the
     *   new location under
     * @returns The location object
     */
    createLocation(organizationId: string, name: string, parentLocationId?: string): Promise<Location | undefined>;
    /**
     * Looks up a location.
     *
     * @param locId The ID of the location to query.
     * @returns The location object
     */
    getLocation(locId: string): Promise<Location | undefined>;
    /**
     * Updates location details.
     *
     * @param locId The ID of the location to update
     * @param name Optional string to update the location's name to
     * @param parentLocId Optional string to update the location's parent location
     *   to
     * @param region Optional string to update the location's region to
     * @returns The location object
     */
    updateLocation(locId: string, name?: string, parentLocId?: string, region?: string): Promise<Location | undefined>;
    /**
     * Deletes a location
     *
     * @param locId The ID of the location to delete
     */
    deleteLocation(locId: string): Promise<void>;
    /**
     * Lists all locations under an organization.
     *
     * @param organizationId The ID of the organization to query
     * @returns A list of locations under the organization
     */
    listLocations(organizationId: string): Promise<Location[]>;
    /**
     * Shares a location with another organization
     *
     * @param organizationId The ID of the organization to share with
     * @param locId The ID of the location to share
     */
    shareLocation(organizationId: string, locId: string): Promise<void>;
    /**
     * Unshares a location with an organization
     *
     * @param organizationId The ID of the organization to unshare with
     * @param locId The ID of the location to unshare
     */
    unshareLocation(organizationId: string, locId: string): Promise<void>;
    /**
     * Get a location's `LocationAuth` (location secret(s)).
     *
     * @param locId The ID of the location to retrieve `LocationAuth` from.
     * @returns The `LocationAuth` for the requested location.
     */
    locationAuth(locId: string): Promise<LocationAuth | undefined>;
    /**
     * Create a location secret (`LocationAuth`).
     *
     * @param locId The ID of the location to create a `LocationAuth` for
     * @returns The newly created `LocationAuth`
     */
    createLocationSecret(locId: string): Promise<LocationAuth | undefined>;
    /**
     * Deletes a location secret (`LocationAuth`).
     *
     * @param locId The ID of the location to delete the `LocationAuth` from
     * @param secretId The ID of the location secret to delete
     */
    deleteLocationSecret(locId: string, secretId: string): Promise<void>;
    /**
     * Queries a robot by its ID.
     *
     * @param id The ID of the robot
     * @returns The `Robot` object
     */
    getRobot(id: string): Promise<Robot | undefined>;
    /**
     * Returns a list of rover rental robots for an organization.
     *
     * @param orgId The ID of the organization to query
     * @returns The list of `RoverRentalRobot` objects
     */
    getRoverRentalRobots(orgId: string): Promise<RoverRentalRobot[]>;
    /**
     * Returns a list of parts for a given robot
     *
     * @param robotId The ID of the robot to query
     * @returns The list of `RobotPart` objects associated with the robot
     */
    getRobotParts(robotId: string): Promise<RobotPart[]>;
    /**
     * Queries a specific robot part by ID.
     *
     * @param id The ID of the requested robot part
     * @returns The robot part and a its json config
     */
    getRobotPart(id: string): Promise<GetRobotPartResponse>;
    /**
     * Get a page of log entries for a specific robot part. Logs are sorted by
     * descending time (newest first).
     *
     * @param id The ID of the requested robot part
     * @param filter Optional string to filter logs on
     * @param levels Optional array of log levels to return. Defaults to returning
     *   all log levels
     * @param pageToken Optional string indicating which page of logs to query.
     *   Defaults to the most recent
     * @returns The robot requested logs and the page token for the next page of
     *   logs
     */
    getRobotPartLogs(id: string, filter?: string, levels?: string[], pageToken?: string): Promise<GetRobotPartLogsResponse>;
    /**
     * Get a stream of log entries for a specific robot part. Logs are sorted by
     * descending time (newest first).
     *
     * @param id The ID of the requested robot part
     * @param queue A queue to put the log entries into
     * @param filter Optional string to filter logs on
     * @param errorsOnly Optional bool to indicate whether or not only error-level
     *   logs should be returned. Defaults to true
     */
    tailRobotPartLogs(id: string, queue: LogEntry[], filter?: string, errorsOnly?: boolean): Promise<void>;
    /**
     * Get a list containing the history of a robot part.
     *
     * @param id The ID of the requested robot part
     * @returns The list of the robot part's history
     */
    getRobotPartHistory(id: string): Promise<RobotPartHistoryEntry[]>;
    /**
     * Updates a robot part based on its ID.
     *
     * @param id The ID of the requested robot part
     * @param name The new name of the robot part
     * @param robotConfig The new config for the robot part
     * @returns The updated robot part
     */
    updateRobotPart(id: string, name: string, robotConfig: Struct): Promise<RobotPart | undefined>;
    /**
     * Creates a new robot part.
     *
     * @param robotId The ID of the robot to create a part for
     * @param partName The name for the new robot part
     * @returns The ID of the newly-created robot part
     */
    newRobotPart(robotId: string, partName: string): Promise<string>;
    /**
     * Deletes a robot part.
     *
     * @param partId The ID of the part to delete
     */
    deleteRobotPart(partId: string): Promise<void>;
    /**
     * Gets a list of a robot's API keys.
     *
     * @param robotId The ID of the robot to get API keys for
     * @returns A list of the robot's API keys
     */
    getRobotAPIKeys(robotId: string): Promise<APIKeyWithAuthorizations[]>;
    /**
     * Marks a robot part as the main part.
     *
     * @param partId The ID of the part to mark as main
     */
    markPartAsMain(partId: string): Promise<void>;
    /**
     * Marks a robot part for restart.
     *
     * @param partId The ID of the part to mark for restart
     */
    markPartForRestart(partId: string): Promise<void>;
    /**
     * Creates a new secret for a robot part.
     *
     * @param partId The ID of the part to create a secret for
     * @returns The robot part object
     */
    createRobotPartSecret(partId: string): Promise<RobotPart | undefined>;
    /**
     * Deletes a robot secret from a robot part.
     *
     * @param partId The ID of the part to delete a secret from
     * @param secretId The ID of the secret to delete
     */
    deleteRobotPartSecret(partId: string, secretId: string): Promise<void>;
    /**
     * Lists all robots in a location.
     *
     * @param locId The ID of the location to list robots for
     * @returns The list of robot objects
     */
    listRobots(locId: string): Promise<Robot[]>;
    /**
     * Creates a new robot.
     *
     * @param locId The ID of the location to create the robot in
     * @param name The name of the new robot
     * @returns The new robot's ID
     */
    newRobot(locId: string, name: string): Promise<string>;
    /**
     * Updates an existing robot's name and/or location.
     *
     * @param robotId The ID of the robot to update
     * @param locId The ID of the location to move the robot to
     * @param name The name to update the robot to
     * @returns The newly-modified robot object
     */
    updateRobot(robotId: string, locId: string, name: string): Promise<Robot | undefined>;
    /**
     * Deletes a robot.
     *
     * @param id The ID of the robot to delete
     */
    deleteRobot(id: string): Promise<void>;
    /**
     * Lists all fragments within an organization.
     *
     * @param organizationId The ID of the organization to list fragments for
     * @param publicOnly Optional, deprecated boolean. Use fragmentVisibilities
     *   instead. If true then only public fragments will be listed. Defaults to
     *   true
     * @param fragmentVisibilities Optional list of fragment visibilities to
     *   include in returned list. An empty fragmentVisibilities list defaults to
     *   normal publicOnly behavior (discludes unlisted public fragments)
     *   Otherwise, fragment visibilities should contain one of the three
     *   visibilities and takes precendence over the publicOnly field
     * @returns The list of fragment objects
     */
    listFragments(organizationId: string, publicOnly?: boolean, fragmentVisibility?: FragmentVisibility[]): Promise<Fragment[]>;
    /**
     * Looks up a fragment by ID.
     *
     * @param id The ID of the fragment to look up
     * @returns The requested fragment
     */
    getFragment(id: string): Promise<Fragment | undefined>;
    /**
     * Creates a new fragment.
     *
     * @param organizationId The ID of the organization to create the fragment
     *   under
     * @param name The name of the new fragment
     * @param config The new fragment's config
     * @returns The newly created fragment
     */
    createFragment(organizationId: string, name: string, config: Struct): Promise<Fragment | undefined>;
    /**
     * Updates an existing fragment.
     *
     * @param id The ID of the fragment to update
     * @param name The name to update the fragment to
     * @param config The config to update the fragment to
     * @param makePublic Optional, deprecated boolean specifying whether the
     *   fragment should be public or not. If not passed, the visibility will be
     *   unchanged. Fragments are private by default when created
     * @param visibility Optional FragmentVisibility specifying the updated
     *   fragment visibility. If not passed, the visibility will be unchanged. If
     *   visibility is not set and makePublic is set, makePublic takes effect. If
     *   makePublic and visibility are set, they must not be conflicting. If
     *   neither is set, the fragment visibility will remain unchanged.
     * @returns The updated fragment
     */
    updateFragment(id: string, name: string, config: Struct, makePublic?: boolean, visibility?: FragmentVisibility): Promise<Fragment | undefined>;
    /**
     * Deletes a fragment.
     *
     * @param id The ID of the fragment to delete
     */
    deleteFragment(id: string): Promise<void>;
    /**
     * @param machineId The machine ID used to filter fragments defined in a
     *   machine's parts. Also returns any fragments nested within the fragments
     *   defined in parts.
     * @param additionalFragmentIds Additional fragment IDs to append to the
     *   response. Useful when needing to view fragments that will be
     *   provisionally added to the machine alongside existing fragments.
     * @returns The list of top level and nested fragments for a machine, as well
     *   as additionally specified fragment IDs.
     */
    listMachineFragments(machineId: string, additionalFragmentIds?: string[]): Promise<Fragment[]>;
    /**
     * Add a role under an organization.
     *
     * @param organizationId The ID of the organization to create the role under
     * @param entityId The ID of the entity the role belongs to (e.g., a user ID)
     * @param role The role to add ("owner" or "operator")
     * @param resourceType The type of resource to create the role for ("robot",
     *   "location", or "organization")
     * @param resourceId The ID of the resource the role is being created for
     */
    addRole(organizationId: string, entityId: string, role: string, resourceType: string, resourceId: string): Promise<void>;
    /**
     * Removes a role from an organization.
     *
     * @param organizationId The ID of the organization to remove the role from
     * @param entityId The ID of the entity the role belongs to (e.g., a user ID)
     * @param role The role to remove ("owner" or "operator")
     * @param resourceType The type of resource to remove the role from ("robot",
     *   "location", or "organization")
     * @param resourceId The ID of the resource the role is being removes from
     */
    removeRole(organizationId: string, entityId: string, role: string, resourceType: string, resourceId: string): Promise<void>;
    /**
     * Changes an existing role.
     *
     * @param oldAuth The existing authorization
     * @param newAuth The new authorization
     */
    changeRole(oldAuthorization: Authorization, newAuthorization: Authorization): Promise<void>;
    /**
     * List all authorizations for an organization.
     *
     * @param organizationId The ID of the organization to list authorizations for
     * @param resourceIds Optional list of IDs of resources to list authorizations
     *   for. If not provided, all resources will be included
     * @returns The list of authorizations
     */
    listAuthorizations(organizationId: string, resourceIds?: string[]): Promise<Authorization[]>;
    /**
     * Checks whether requested permissions exist.
     *
     * @param permissions A list of permissions to check
     * @returns A filtered list of the authorized permissions
     */
    checkPermissions(permissions: AuthorizedPermissions[]): Promise<AuthorizedPermissions[]>;
    /**
     * Get an item from the registry.
     *
     * @param itemId The ID of the item to get
     * @returns The requested item
     */
    getRegistryItem(itemId: string): Promise<RegistryItem | undefined>;
    /**
     * Create a new registry item.
     *
     * @param organizationId The ID of the organization to create the registry
     *   item under
     * @param name The name of the registry item
     * @param type The type of the item in the registry.
     */
    createRegistryItem(organizationId: string, name: string, type: PackageType): Promise<void>;
    /**
     * Update an existing registry item.
     *
     * @param itemId The ID of the registry item to update
     * @param type The PackageType to update the item to
     * @param description A description of the item
     * @param visibility A visibility value to update to
     */
    updateRegistryItem(itemId: string, type: PackageType, description: string, visibility: Visibility): Promise<void>;
    /**
     * List all registry items for an organization.
     *
     * @param organizationId The ID of the organization to query registry items
     *   for
     * @param types A list of types to query. If empty, will not filter on type
     * @param visibilities A list of visibilities to query for. If empty, will not
     *   filter on visibility
     * @param platforms A list of platforms to query for. If empty, will not
     *   filter on platform
     * @param statuses A list of statuses to query for. If empty, will not filter
     *   on status
     * @param searchTerm Optional search term to filter on
     * @param pageToken Optional page token for results. If not provided, will
     *   return all results
     * @returns The list of registry items
     */
    listRegistryItems(organizationId: string, types: PackageType[], visibilities: Visibility[], platforms: string[], statuses: RegistryItemStatus[], searchTerm?: string, pageToken?: string): Promise<RegistryItem[]>;
    /**
     * Deletes a registry item.
     *
     * @param itemId The ID of the item to delete
     */
    deleteRegistryItem(itemId: string): Promise<void>;
    /**
     * Creates a new module.
     *
     * @param organizationId The ID of the organization to create the module under
     * @param name The name of the module
     * @returns The module ID and a URL to its detail page
     */
    createModule(organizationId: string, name: string): Promise<CreateModuleResponse>;
    /**
     * Updates an existing module.
     *
     * @param moduleId The ID of the module to update
     * @param visibility The visibility to set for the module
     * @param url The url to reference for documentation, code, etc.
     * @param description A short description of the module
     * @param models A list of models available in the module
     * @param entrypoint The executable to run to start the module program
     * @returns The module URL
     */
    updateModule(moduleId: string, visibility: Visibility, url: string, description: string, models: Model[], entrypoint: string): Promise<string>;
    /**
     * Looks up a particular module.
     *
     * @param moduleId The ID of the module
     * @returns The requested module
     */
    getModule(moduleId: string): Promise<Module | undefined>;
    /**
     * Lists all modules for an organization.
     *
     * @param organizationId The ID of the organization to query
     * @returns The organization's modules
     */
    listModules(organizationId: string): Promise<Module[]>;
    /**
     * Creates a new API key.
     *
     * @param authorizations The list of authorizations to provide for the API key
     * @param name An optional name for the key. If none is passed, defaults to
     *   present timestamp
     * @returns The new key and ID
     */
    createKey(authorizations: Authorization[], name?: string): Promise<CreateKeyResponse>;
    /**
     * Deletes an existing API key.
     *
     * @param id The ID of the key to delete
     */
    deleteKey(id: string): Promise<import("../gen/app/v1/app_pb").DeleteKeyResponse>;
    /**
     * List all API keys for an organization.
     *
     * @param orgId The ID of the organization to query
     * @returns The list of API keys
     */
    listKeys(orgId: string): Promise<APIKeyWithAuthorizations[]>;
    /**
     * Rotates an existing API key.
     *
     * @param id The ID of the key to rotate
     * @returns The updated key and ID
     */
    rotateKey(id: string): Promise<RotateKeyResponse>;
    /**
     * Creates a new key with an existing key's authorizations
     *
     * @param id The ID of the key to duplicate
     * @returns The new key and ID
     */
    createKeyFromExistingKeyAuthorizations(id: string): Promise<CreateKeyFromExistingKeyAuthorizationsResponse>;
}
