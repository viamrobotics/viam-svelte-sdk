import type { RobotClient } from '../../robot';
import type { Options } from '../../types';
import { Duration, Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import { type Board, type PowerMode, type Tick } from './board';
/**
 * A gRPC-web client for the Board component.
 *
 * @group Clients
 */
export declare class BoardClient implements Board {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    setGPIO(pin: string, high: boolean, extra?: {}, callOptions?: CallOptions): Promise<void>;
    getGPIO(pin: string, extra?: {}, callOptions?: CallOptions): Promise<boolean>;
    getPWM(pin: string, extra?: {}, callOptions?: CallOptions): Promise<number>;
    setPWM(pin: string, dutyCyle: number, extra?: {}, callOptions?: CallOptions): Promise<void>;
    getPWMFrequency(pin: string, extra?: {}, callOptions?: CallOptions): Promise<number>;
    setPWMFrequency(pin: string, frequencyHz: number, extra?: {}, callOptions?: CallOptions): Promise<void>;
    readAnalogReader(analogReader: string, extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/component/board/v1/board_pb").ReadAnalogReaderResponse>;
    writeAnalog(pin: string, value: number, extra?: {}, callOptions?: CallOptions): Promise<void>;
    getDigitalInterruptValue(digitalInterruptName: string, extra?: {}, callOptions?: CallOptions): Promise<number>;
    streamTicks(interrupts: string[], queue: Tick[], extra?: {}, callOptions?: CallOptions): Promise<void>;
    setPowerMode(powerMode: PowerMode, duration?: Duration, extra?: {}, callOptions?: CallOptions): Promise<void>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
