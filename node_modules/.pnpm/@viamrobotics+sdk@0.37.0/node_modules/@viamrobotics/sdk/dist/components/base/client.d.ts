import { Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import type { RobotClient } from '../../robot';
import type { Options, Vector3 } from '../../types';
import type { Base } from './base';
/**
 * A gRPC-web client for the Base component.
 *
 * @group Clients
 */
export declare class BaseClient implements Base {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    getGeometries(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Geometry[]>;
    moveStraight(distanceMm: number, mmPerSec: number, extra?: {}, callOptions?: CallOptions): Promise<void>;
    spin(angleDeg: number, degsPerSec: number, extra?: {}, callOptions?: CallOptions): Promise<void>;
    setPower(linear: Vector3, angular: Vector3, extra?: {}, callOptions?: CallOptions): Promise<void>;
    setVelocity(linear: Vector3, angular: Vector3, extra?: {}, callOptions?: CallOptions): Promise<void>;
    stop(extra?: {}, callOptions?: CallOptions): Promise<void>;
    isMoving(callOptions?: CallOptions): Promise<boolean>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
    getProperties(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/component/base/v1/base_pb").GetPropertiesResponse>;
}
