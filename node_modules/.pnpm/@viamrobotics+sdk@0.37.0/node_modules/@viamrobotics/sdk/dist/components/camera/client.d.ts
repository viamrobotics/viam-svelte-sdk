import { type JsonValue, Struct } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import type { RobotClient } from '../../robot';
import type { Options } from '../../types';
import type { Camera, MimeType } from './camera';
/**
 * A gRPC-web client for the Camera component.
 *
 * @group Clients
 */
export declare class CameraClient implements Camera {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    getGeometries(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Geometry[]>;
    getImage(mimeType?: MimeType, extra?: {}, callOptions?: CallOptions): Promise<Uint8Array>;
    renderFrame(mimeType?: MimeType, extra?: {}, callOptions?: CallOptions): Promise<Blob>;
    getPointCloud(extra?: {}, callOptions?: CallOptions): Promise<Uint8Array>;
    getProperties(callOptions?: CallOptions): Promise<import("../../gen/component/camera/v1/camera_pb").GetPropertiesResponse>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
