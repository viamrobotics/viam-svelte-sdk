import { Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import type { RobotClient } from '../../robot';
import type { Options } from '../../types';
import type { MovementSensor } from './movement-sensor';
/**
 * A gRPC-web client for the MovementSensor component.
 *
 * @group Clients
 */
export declare class MovementSensorClient implements MovementSensor {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    getLinearVelocity(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Vector3>;
    getAngularVelocity(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Vector3>;
    getCompassHeading(extra?: {}, callOptions?: CallOptions): Promise<number>;
    getOrientation(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Orientation>;
    getPosition(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/component/movementsensor/v1/movementsensor_pb").GetPositionResponse>;
    getProperties(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/component/movementsensor/v1/movementsensor_pb").GetPropertiesResponse>;
    getAccuracy(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/component/movementsensor/v1/movementsensor_pb").GetAccuracyResponse>;
    getLinearAcceleration(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").Vector3>;
    getReadings(extra?: {}, callOptions?: CallOptions): Promise<Record<string, JsonValue>>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
