// @generated by protoc-gen-connect-es v1.5.0
// @generated from file stream/v1/stream.proto (package proto.stream.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddStreamRequest, AddStreamResponse, GetStreamOptionsRequest, GetStreamOptionsResponse, ListStreamsRequest, ListStreamsResponse, RemoveStreamRequest, RemoveStreamResponse, SetStreamOptionsRequest, SetStreamOptionsResponse } from "./stream_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * A StreamService is used to coordinate with a WebRTC the listing,
 * addition, and removal of registered video streams.
 * TODO(https://github.com/viamrobotics/rdk/issues/509): support removal
 *
 * @generated from service proto.stream.v1.StreamService
 */
export declare const StreamService: {
  readonly typeName: "proto.stream.v1.StreamService",
  readonly methods: {
    /**
     * ListStreams returns all streams registered.
     *
     * @generated from rpc proto.stream.v1.StreamService.ListStreams
     */
    readonly listStreams: {
      readonly name: "ListStreams",
      readonly I: typeof ListStreamsRequest,
      readonly O: typeof ListStreamsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * AddStream requests a particular stream be added.
     *
     * @generated from rpc proto.stream.v1.StreamService.AddStream
     */
    readonly addStream: {
      readonly name: "AddStream",
      readonly I: typeof AddStreamRequest,
      readonly O: typeof AddStreamResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetStreamOptions returns the options for a particular stream.
     *
     * @generated from rpc proto.stream.v1.StreamService.GetStreamOptions
     */
    readonly getStreamOptions: {
      readonly name: "GetStreamOptions",
      readonly I: typeof GetStreamOptionsRequest,
      readonly O: typeof GetStreamOptionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetStreamOptions sets the options for a particular stream.
     *
     * @generated from rpc proto.stream.v1.StreamService.SetStreamOptions
     */
    readonly setStreamOptions: {
      readonly name: "SetStreamOptions",
      readonly I: typeof SetStreamOptionsRequest,
      readonly O: typeof SetStreamOptionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * RemoveStream requests a particular stream be removed. If the calling client
     * is the last to be receiving the stream, it will attempt to be stopped to
     * conserve resources.
     *
     * @generated from rpc proto.stream.v1.StreamService.RemoveStream
     */
    readonly removeStream: {
      readonly name: "RemoveStream",
      readonly I: typeof RemoveStreamRequest,
      readonly O: typeof RemoveStreamResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

