// @generated by protoc-gen-connect-es v1.5.0
// @generated from file component/motor/v1/motor.proto (package viam.component.motor.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetPositionRequest, GetPositionResponse, GetPropertiesRequest, GetPropertiesResponse, GoForRequest, GoForResponse, GoToRequest, GoToResponse, IsMovingRequest, IsMovingResponse, IsPoweredRequest, IsPoweredResponse, ResetZeroPositionRequest, ResetZeroPositionResponse, SetPowerRequest, SetPowerResponse, SetRPMRequest, SetRPMResponse, StopRequest, StopResponse } from "./motor_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse, GetGeometriesRequest, GetGeometriesResponse } from "../../../common/v1/common_pb.js";

/**
 * A MotorService maintains all motors associated with a robot
 *
 * @generated from service viam.component.motor.v1.MotorService
 */
export declare const MotorService: {
  readonly typeName: "viam.component.motor.v1.MotorService",
  readonly methods: {
    /**
     * SetPower sets the percentage of the motor's total power that should be employed
     * expressed a value between -1 and 1 where negative values indicate a backwards
     * direction and positive values a forward direction
     *
     * @generated from rpc viam.component.motor.v1.MotorService.SetPower
     */
    readonly setPower: {
      readonly name: "SetPower",
      readonly I: typeof SetPowerRequest,
      readonly O: typeof SetPowerResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
     * for a specified number of rotations relative to its starting position
     * This method will return an error if position reporting is not supported
     * If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
     * Deprecated: If revolutions is 0, this will run the motor at rpm indefinitely.
     *
     * @generated from rpc viam.component.motor.v1.MotorService.GoFor
     */
    readonly goFor: {
      readonly name: "GoFor",
      readonly I: typeof GoForRequest,
      readonly O: typeof GoForResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GoTo requests the robot's motor to move to a specific position that
     * is relative to its home position at a specified speed which is expressed in RPM
     * This method will return an error if position reporting is not supported
     *
     * @generated from rpc viam.component.motor.v1.MotorService.GoTo
     */
    readonly goTo: {
      readonly name: "GoTo",
      readonly I: typeof GoToRequest,
      readonly O: typeof GoToResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetRPM instructs the motor to move at the specified RPM indefinitely.
     *
     * @generated from rpc viam.component.motor.v1.MotorService.SetRPM
     */
    readonly setRPM: {
      readonly name: "SetRPM",
      readonly I: typeof SetRPMRequest,
      readonly O: typeof SetRPMResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ResetZeroPosition sets the current position of the motor as the new zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from rpc viam.component.motor.v1.MotorService.ResetZeroPosition
     */
    readonly resetZeroPosition: {
      readonly name: "ResetZeroPosition",
      readonly I: typeof ResetZeroPositionRequest,
      readonly O: typeof ResetZeroPositionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Position reports the position of the robot's motor relative to its zero position
     * This method will return an error if position reporting is not supported
     *
     * @generated from rpc viam.component.motor.v1.MotorService.GetPosition
     */
    readonly getPosition: {
      readonly name: "GetPosition",
      readonly I: typeof GetPositionRequest,
      readonly O: typeof GetPositionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetProperties returns a message of booleans indicating which optional features the robot's motor supports
     *
     * @generated from rpc viam.component.motor.v1.MotorService.GetProperties
     */
    readonly getProperties: {
      readonly name: "GetProperties",
      readonly I: typeof GetPropertiesRequest,
      readonly O: typeof GetPropertiesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Stop turns the robot's motor off
     *
     * @generated from rpc viam.component.motor.v1.MotorService.Stop
     */
    readonly stop: {
      readonly name: "Stop",
      readonly I: typeof StopRequest,
      readonly O: typeof StopResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * IsPowered returns true if the robot's motor is on
     *
     * @generated from rpc viam.component.motor.v1.MotorService.IsPowered
     */
    readonly isPowered: {
      readonly name: "IsPowered",
      readonly I: typeof IsPoweredRequest,
      readonly O: typeof IsPoweredResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * IsMoving reports if a component is in motion
     *
     * @generated from rpc viam.component.motor.v1.MotorService.IsMoving
     */
    readonly isMoving: {
      readonly name: "IsMoving",
      readonly I: typeof IsMovingRequest,
      readonly O: typeof IsMovingResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.component.motor.v1.MotorService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGeometries returns the geometries of the component in their current configuration
     *
     * @generated from rpc viam.component.motor.v1.MotorService.GetGeometries
     */
    readonly getGeometries: {
      readonly name: "GetGeometries",
      readonly I: typeof GetGeometriesRequest,
      readonly O: typeof GetGeometriesResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

