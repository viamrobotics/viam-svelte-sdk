// @generated by protoc-gen-connect-es v1.5.0
// @generated from file proto/rpc/v1/auth.proto (package proto.rpc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AuthenticateRequest, AuthenticateResponse, AuthenticateToRequest, AuthenticateToResponse } from "./auth_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * An AuthService is intended to be used as a means to perform application level
 * authentication. Its sole Authenticate method should be used prior to any
 * other services that a gRPC server has to offer.
 *
 * @generated from service proto.rpc.v1.AuthService
 */
export declare const AuthService: {
  readonly typeName: "proto.rpc.v1.AuthService",
  readonly methods: {
    /**
     * Authenticate attempts to authenticate the caller claiming to be
     * the given entity. The resulting response contains an access token
     * with the subject as the entity and the audience/issuer as the
     * provider of this service. This token should be used for all future
     * RPC requests.
     *
     * @generated from rpc proto.rpc.v1.AuthService.Authenticate
     */
    readonly authenticate: {
      readonly name: "Authenticate",
      readonly I: typeof AuthenticateRequest,
      readonly O: typeof AuthenticateResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * An ExternalAuthService is intended to be used as a means to perform application level
 * authentication but for an external entity that it is responsible for handling auth for.
 * An example of its use would be for a entity that only trusts an external source to
 * perform authentication for it.
 * Its sole AuthenticateTo method should be used prior to any other services that the external
 * entity's gRPC server has to offer.
 *
 * @generated from service proto.rpc.v1.ExternalAuthService
 */
export declare const ExternalAuthService: {
  readonly typeName: "proto.rpc.v1.ExternalAuthService",
  readonly methods: {
    /**
     * AuthenticateTo attempts to allow the caller to authenticate to another entity.
     * The resulting response contains an access token with the subject
     * as the calling entity, the audience as the other entity, and the issuer
     * as the provider of this service. This token should be used for all
     * future RPC requests to the other entity on the services it provides.
     * This assumes that the caller is already authenticated to the
     * server implementing this service.
     *
     * @generated from rpc proto.rpc.v1.ExternalAuthService.AuthenticateTo
     */
    readonly authenticateTo: {
      readonly name: "AuthenticateTo",
      readonly I: typeof AuthenticateToRequest,
      readonly O: typeof AuthenticateToResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

