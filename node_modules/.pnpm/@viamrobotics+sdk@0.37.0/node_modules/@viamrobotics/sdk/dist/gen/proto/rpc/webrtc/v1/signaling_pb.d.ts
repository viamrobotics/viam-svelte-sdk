// @generated by protoc-gen-es v1.10.0
// @generated from file proto/rpc/webrtc/v1/signaling.proto (package proto.rpc.webrtc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Status } from "../../../../google/rpc/status_pb.js";

/**
 * ICECandidate represents an ICE candidate.
 * From https://github.com/pion/webrtc/blob/5f6baf73255598a7b4a7c9400bb0381acc9aa3dc/icecandidateinit.go
 *
 * @generated from message proto.rpc.webrtc.v1.ICECandidate
 */
export declare class ICECandidate extends Message<ICECandidate> {
  /**
   * @generated from field: string candidate = 1;
   */
  candidate: string;

  /**
   * @generated from field: optional string sdp_mid = 2;
   */
  sdpMid?: string;

  /**
   * @generated from field: optional uint32 sdpm_line_index = 3;
   */
  sdpmLineIndex?: number;

  /**
   * @generated from field: optional string username_fragment = 4;
   */
  usernameFragment?: string;

  constructor(data?: PartialMessage<ICECandidate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.ICECandidate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ICECandidate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ICECandidate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ICECandidate;

  static equals(a: ICECandidate | PlainMessage<ICECandidate> | undefined, b: ICECandidate | PlainMessage<ICECandidate> | undefined): boolean;
}

/**
 * CallRequest is the SDP offer that the controlling side is making.
 *
 * @generated from message proto.rpc.webrtc.v1.CallRequest
 */
export declare class CallRequest extends Message<CallRequest> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp: string;

  /**
   * when disable_trickle is true, the init stage will be the only stage
   * to be received in the response and the caller can expect the SDP
   * to contain all ICE candidates.
   *
   * @generated from field: bool disable_trickle = 2;
   */
  disableTrickle: boolean;

  constructor(data?: PartialMessage<CallRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallRequest;

  static equals(a: CallRequest | PlainMessage<CallRequest> | undefined, b: CallRequest | PlainMessage<CallRequest> | undefined): boolean;
}

/**
 * CallResponseInitStage is the first and a one time stage that represents
 * the initial response to starting a call.
 *
 * @generated from message proto.rpc.webrtc.v1.CallResponseInitStage
 */
export declare class CallResponseInitStage extends Message<CallResponseInitStage> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp: string;

  constructor(data?: PartialMessage<CallResponseInitStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallResponseInitStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponseInitStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponseInitStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponseInitStage;

  static equals(a: CallResponseInitStage | PlainMessage<CallResponseInitStage> | undefined, b: CallResponseInitStage | PlainMessage<CallResponseInitStage> | undefined): boolean;
}

/**
 * CallResponseUpdateStage is multiply used to trickle in ICE candidates from
 * the controlled (answering) side.
 *
 * @generated from message proto.rpc.webrtc.v1.CallResponseUpdateStage
 */
export declare class CallResponseUpdateStage extends Message<CallResponseUpdateStage> {
  /**
   * @generated from field: proto.rpc.webrtc.v1.ICECandidate candidate = 1;
   */
  candidate?: ICECandidate;

  constructor(data?: PartialMessage<CallResponseUpdateStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallResponseUpdateStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponseUpdateStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponseUpdateStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponseUpdateStage;

  static equals(a: CallResponseUpdateStage | PlainMessage<CallResponseUpdateStage> | undefined, b: CallResponseUpdateStage | PlainMessage<CallResponseUpdateStage> | undefined): boolean;
}

/**
 * CallResponse is the SDP answer that the controlled side responds with.
 *
 * @generated from message proto.rpc.webrtc.v1.CallResponse
 */
export declare class CallResponse extends Message<CallResponse> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from oneof proto.rpc.webrtc.v1.CallResponse.stage
   */
  stage: {
    /**
     * @generated from field: proto.rpc.webrtc.v1.CallResponseInitStage init = 2;
     */
    value: CallResponseInitStage;
    case: "init";
  } | {
    /**
     * @generated from field: proto.rpc.webrtc.v1.CallResponseUpdateStage update = 3;
     */
    value: CallResponseUpdateStage;
    case: "update";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CallResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse;

  static equals(a: CallResponse | PlainMessage<CallResponse> | undefined, b: CallResponse | PlainMessage<CallResponse> | undefined): boolean;
}

/**
 * CallUpdateRequest updates the call with additional info to the controlled side.
 *
 * @generated from message proto.rpc.webrtc.v1.CallUpdateRequest
 */
export declare class CallUpdateRequest extends Message<CallUpdateRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from oneof proto.rpc.webrtc.v1.CallUpdateRequest.update
   */
  update: {
    /**
     * @generated from field: proto.rpc.webrtc.v1.ICECandidate candidate = 2;
     */
    value: ICECandidate;
    case: "candidate";
  } | {
    /**
     * @generated from field: bool done = 3;
     */
    value: boolean;
    case: "done";
  } | {
    /**
     * @generated from field: google.rpc.Status error = 4;
     */
    value: Status;
    case: "error";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CallUpdateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallUpdateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallUpdateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallUpdateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallUpdateRequest;

  static equals(a: CallUpdateRequest | PlainMessage<CallUpdateRequest> | undefined, b: CallUpdateRequest | PlainMessage<CallUpdateRequest> | undefined): boolean;
}

/**
 * CallUpdateResponse contains nothing in response to a call update.
 *
 * @generated from message proto.rpc.webrtc.v1.CallUpdateResponse
 */
export declare class CallUpdateResponse extends Message<CallUpdateResponse> {
  constructor(data?: PartialMessage<CallUpdateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.CallUpdateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallUpdateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallUpdateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallUpdateResponse;

  static equals(a: CallUpdateResponse | PlainMessage<CallUpdateResponse> | undefined, b: CallUpdateResponse | PlainMessage<CallUpdateResponse> | undefined): boolean;
}

/**
 * ICEServer describes an ICE server.
 *
 * @generated from message proto.rpc.webrtc.v1.ICEServer
 */
export declare class ICEServer extends Message<ICEServer> {
  /**
   * @generated from field: repeated string urls = 1;
   */
  urls: string[];

  /**
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * @generated from field: string credential = 3;
   */
  credential: string;

  constructor(data?: PartialMessage<ICEServer>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.ICEServer";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ICEServer;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ICEServer;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ICEServer;

  static equals(a: ICEServer | PlainMessage<ICEServer> | undefined, b: ICEServer | PlainMessage<ICEServer> | undefined): boolean;
}

/**
 * WebRTCConfig represents parts of a WebRTC config.
 *
 * @generated from message proto.rpc.webrtc.v1.WebRTCConfig
 */
export declare class WebRTCConfig extends Message<WebRTCConfig> {
  /**
   * @generated from field: repeated proto.rpc.webrtc.v1.ICEServer additional_ice_servers = 1;
   */
  additionalIceServers: ICEServer[];

  /**
   * disable_trickle indicates if Trickle ICE should be used. Currently, both
   * sides must both respect this setting.
   *
   * @generated from field: bool disable_trickle = 2;
   */
  disableTrickle: boolean;

  constructor(data?: PartialMessage<WebRTCConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.WebRTCConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebRTCConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebRTCConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebRTCConfig;

  static equals(a: WebRTCConfig | PlainMessage<WebRTCConfig> | undefined, b: WebRTCConfig | PlainMessage<WebRTCConfig> | undefined): boolean;
}

/**
 * AnswerRequestInitStage is the first and a one time stage that represents the
 * callers initial SDP request to the controlled (answerer) side.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequestInitStage
 */
export declare class AnswerRequestInitStage extends Message<AnswerRequestInitStage> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp: string;

  /**
   * @generated from field: proto.rpc.webrtc.v1.WebRTCConfig optional_config = 2;
   */
  optionalConfig?: WebRTCConfig;

  /**
   * @generated from field: optional google.protobuf.Timestamp deadline = 3;
   */
  deadline?: Timestamp;

  constructor(data?: PartialMessage<AnswerRequestInitStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequestInitStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequestInitStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequestInitStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequestInitStage;

  static equals(a: AnswerRequestInitStage | PlainMessage<AnswerRequestInitStage> | undefined, b: AnswerRequestInitStage | PlainMessage<AnswerRequestInitStage> | undefined): boolean;
}

/**
 * AnswerRequestUpdateStage is multiply used to trickle in ICE candidates to
 * the controlled (answerer) side.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequestUpdateStage
 */
export declare class AnswerRequestUpdateStage extends Message<AnswerRequestUpdateStage> {
  /**
   * @generated from field: proto.rpc.webrtc.v1.ICECandidate candidate = 1;
   */
  candidate?: ICECandidate;

  constructor(data?: PartialMessage<AnswerRequestUpdateStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequestUpdateStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequestUpdateStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequestUpdateStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequestUpdateStage;

  static equals(a: AnswerRequestUpdateStage | PlainMessage<AnswerRequestUpdateStage> | undefined, b: AnswerRequestUpdateStage | PlainMessage<AnswerRequestUpdateStage> | undefined): boolean;
}

/**
 * AnswerRequestDoneStage indicates the controller is done responding with candidates.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequestDoneStage
 */
export declare class AnswerRequestDoneStage extends Message<AnswerRequestDoneStage> {
  constructor(data?: PartialMessage<AnswerRequestDoneStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequestDoneStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequestDoneStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequestDoneStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequestDoneStage;

  static equals(a: AnswerRequestDoneStage | PlainMessage<AnswerRequestDoneStage> | undefined, b: AnswerRequestDoneStage | PlainMessage<AnswerRequestDoneStage> | undefined): boolean;
}

/**
 * AnswerRequestErrorStage indicates the exchange has failed with an error.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequestErrorStage
 */
export declare class AnswerRequestErrorStage extends Message<AnswerRequestErrorStage> {
  /**
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<AnswerRequestErrorStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequestErrorStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequestErrorStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequestErrorStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequestErrorStage;

  static equals(a: AnswerRequestErrorStage | PlainMessage<AnswerRequestErrorStage> | undefined, b: AnswerRequestErrorStage | PlainMessage<AnswerRequestErrorStage> | undefined): boolean;
}

/**
 * AnswerRequestHeartbeatStage is sent periodically to verify liveness of answerer.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequestHeartbeatStage
 */
export declare class AnswerRequestHeartbeatStage extends Message<AnswerRequestHeartbeatStage> {
  constructor(data?: PartialMessage<AnswerRequestHeartbeatStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequestHeartbeatStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequestHeartbeatStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequestHeartbeatStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequestHeartbeatStage;

  static equals(a: AnswerRequestHeartbeatStage | PlainMessage<AnswerRequestHeartbeatStage> | undefined, b: AnswerRequestHeartbeatStage | PlainMessage<AnswerRequestHeartbeatStage> | undefined): boolean;
}

/**
 * AnswerRequest is the SDP offer that the controlling side is making via the answering
 * stream.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerRequest
 */
export declare class AnswerRequest extends Message<AnswerRequest> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from oneof proto.rpc.webrtc.v1.AnswerRequest.stage
   */
  stage: {
    /**
     * @generated from field: proto.rpc.webrtc.v1.AnswerRequestInitStage init = 2;
     */
    value: AnswerRequestInitStage;
    case: "init";
  } | {
    /**
     * @generated from field: proto.rpc.webrtc.v1.AnswerRequestUpdateStage update = 3;
     */
    value: AnswerRequestUpdateStage;
    case: "update";
  } | {
    /**
     * done is sent when the requester is done sending information
     *
     * @generated from field: proto.rpc.webrtc.v1.AnswerRequestDoneStage done = 4;
     */
    value: AnswerRequestDoneStage;
    case: "done";
  } | {
    /**
     * error is sent any time before done
     *
     * @generated from field: proto.rpc.webrtc.v1.AnswerRequestErrorStage error = 5;
     */
    value: AnswerRequestErrorStage;
    case: "error";
  } | {
    /**
     * heartbeat is sent periodically to verify liveness of answerer
     *
     * @generated from field: proto.rpc.webrtc.v1.AnswerRequestHeartbeatStage heartbeat = 6;
     */
    value: AnswerRequestHeartbeatStage;
    case: "heartbeat";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AnswerRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerRequest;

  static equals(a: AnswerRequest | PlainMessage<AnswerRequest> | undefined, b: AnswerRequest | PlainMessage<AnswerRequest> | undefined): boolean;
}

/**
 * AnswerResponseInitStage is the first and a one time stage that represents the
 * answerers initial SDP response to the controlling side.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerResponseInitStage
 */
export declare class AnswerResponseInitStage extends Message<AnswerResponseInitStage> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp: string;

  constructor(data?: PartialMessage<AnswerResponseInitStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerResponseInitStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerResponseInitStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerResponseInitStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerResponseInitStage;

  static equals(a: AnswerResponseInitStage | PlainMessage<AnswerResponseInitStage> | undefined, b: AnswerResponseInitStage | PlainMessage<AnswerResponseInitStage> | undefined): boolean;
}

/**
 * AnswerResponseUpdateStage is multiply used to trickle in ICE candidates to
 * the controlling side.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerResponseUpdateStage
 */
export declare class AnswerResponseUpdateStage extends Message<AnswerResponseUpdateStage> {
  /**
   * @generated from field: proto.rpc.webrtc.v1.ICECandidate candidate = 1;
   */
  candidate?: ICECandidate;

  constructor(data?: PartialMessage<AnswerResponseUpdateStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerResponseUpdateStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerResponseUpdateStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerResponseUpdateStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerResponseUpdateStage;

  static equals(a: AnswerResponseUpdateStage | PlainMessage<AnswerResponseUpdateStage> | undefined, b: AnswerResponseUpdateStage | PlainMessage<AnswerResponseUpdateStage> | undefined): boolean;
}

/**
 * AnswerResponseDoneStage indicates the answerer is done responding with candidates.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerResponseDoneStage
 */
export declare class AnswerResponseDoneStage extends Message<AnswerResponseDoneStage> {
  constructor(data?: PartialMessage<AnswerResponseDoneStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerResponseDoneStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerResponseDoneStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerResponseDoneStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerResponseDoneStage;

  static equals(a: AnswerResponseDoneStage | PlainMessage<AnswerResponseDoneStage> | undefined, b: AnswerResponseDoneStage | PlainMessage<AnswerResponseDoneStage> | undefined): boolean;
}

/**
 * AnswerResponseErrorStage indicates the exchange has failed with an error.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerResponseErrorStage
 */
export declare class AnswerResponseErrorStage extends Message<AnswerResponseErrorStage> {
  /**
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  constructor(data?: PartialMessage<AnswerResponseErrorStage>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerResponseErrorStage";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerResponseErrorStage;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerResponseErrorStage;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerResponseErrorStage;

  static equals(a: AnswerResponseErrorStage | PlainMessage<AnswerResponseErrorStage> | undefined, b: AnswerResponseErrorStage | PlainMessage<AnswerResponseErrorStage> | undefined): boolean;
}

/**
 * AnswerResponse is the SDP answer that an answerer responds with.
 *
 * @generated from message proto.rpc.webrtc.v1.AnswerResponse
 */
export declare class AnswerResponse extends Message<AnswerResponse> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid: string;

  /**
   * @generated from oneof proto.rpc.webrtc.v1.AnswerResponse.stage
   */
  stage: {
    /**
     * @generated from field: proto.rpc.webrtc.v1.AnswerResponseInitStage init = 2;
     */
    value: AnswerResponseInitStage;
    case: "init";
  } | {
    /**
     * @generated from field: proto.rpc.webrtc.v1.AnswerResponseUpdateStage update = 3;
     */
    value: AnswerResponseUpdateStage;
    case: "update";
  } | {
    /**
     * done is sent when the answerer is done sending information
     *
     * @generated from field: proto.rpc.webrtc.v1.AnswerResponseDoneStage done = 4;
     */
    value: AnswerResponseDoneStage;
    case: "done";
  } | {
    /**
     * error is sent any time before done
     *
     * @generated from field: proto.rpc.webrtc.v1.AnswerResponseErrorStage error = 5;
     */
    value: AnswerResponseErrorStage;
    case: "error";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AnswerResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.AnswerResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnswerResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnswerResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnswerResponse;

  static equals(a: AnswerResponse | PlainMessage<AnswerResponse> | undefined, b: AnswerResponse | PlainMessage<AnswerResponse> | undefined): boolean;
}

/**
 * OptionalWebRTCConfigRequest is the request for getting an optional WebRTC config
 * to use for the peer connection.
 *
 * @generated from message proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest
 */
export declare class OptionalWebRTCConfigRequest extends Message<OptionalWebRTCConfigRequest> {
  constructor(data?: PartialMessage<OptionalWebRTCConfigRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionalWebRTCConfigRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionalWebRTCConfigRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionalWebRTCConfigRequest;

  static equals(a: OptionalWebRTCConfigRequest | PlainMessage<OptionalWebRTCConfigRequest> | undefined, b: OptionalWebRTCConfigRequest | PlainMessage<OptionalWebRTCConfigRequest> | undefined): boolean;
}

/**
 * OptionalWebRTCConfigResponse contains the optional WebRTC config
 * to use for the peer connection.
 *
 * @generated from message proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse
 */
export declare class OptionalWebRTCConfigResponse extends Message<OptionalWebRTCConfigResponse> {
  /**
   * @generated from field: proto.rpc.webrtc.v1.WebRTCConfig config = 1;
   */
  config?: WebRTCConfig;

  constructor(data?: PartialMessage<OptionalWebRTCConfigResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionalWebRTCConfigResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionalWebRTCConfigResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionalWebRTCConfigResponse;

  static equals(a: OptionalWebRTCConfigResponse | PlainMessage<OptionalWebRTCConfigResponse> | undefined, b: OptionalWebRTCConfigResponse | PlainMessage<OptionalWebRTCConfigResponse> | undefined): boolean;
}

