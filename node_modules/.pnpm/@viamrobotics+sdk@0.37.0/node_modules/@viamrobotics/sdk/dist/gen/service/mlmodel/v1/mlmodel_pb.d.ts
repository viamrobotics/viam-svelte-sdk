// @generated by protoc-gen-es v1.10.0
// @generated from file service/mlmodel/v1/mlmodel.proto (package viam.service.mlmodel.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum viam.service.mlmodel.v1.LabelType
 */
export declare enum LabelType {
  /**
   * @generated from enum value: LABEL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * the value of the arrays/tensor is the label index
   *
   * @generated from enum value: LABEL_TYPE_TENSOR_VALUE = 1;
   */
  TENSOR_VALUE = 1,

  /**
   * the position of the tensor value in the axis is the label index
   *
   * @generated from enum value: LABEL_TYPE_TENSOR_AXIS = 2;
   */
  TENSOR_AXIS = 2,
}

/**
 * @generated from message viam.service.mlmodel.v1.InferRequest
 */
export declare class InferRequest extends Message<InferRequest> {
  /**
   * name of the model service
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * the input data is provided as set of named flat tensors
   *
   * @generated from field: viam.service.mlmodel.v1.FlatTensors input_tensors = 3;
   */
  inputTensors?: FlatTensors;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<InferRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.InferRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferRequest;

  static equals(a: InferRequest | PlainMessage<InferRequest> | undefined, b: InferRequest | PlainMessage<InferRequest> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.InferResponse
 */
export declare class InferResponse extends Message<InferResponse> {
  /**
   * the output data is provided as a set of named flat tensors
   *
   * @generated from field: viam.service.mlmodel.v1.FlatTensors output_tensors = 3;
   */
  outputTensors?: FlatTensors;

  constructor(data?: PartialMessage<InferResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.InferResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InferResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InferResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InferResponse;

  static equals(a: InferResponse | PlainMessage<InferResponse> | undefined, b: InferResponse | PlainMessage<InferResponse> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.MetadataRequest
 */
export declare class MetadataRequest extends Message<MetadataRequest> {
  /**
   * name of the model service
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<MetadataRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.MetadataRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataRequest;

  static equals(a: MetadataRequest | PlainMessage<MetadataRequest> | undefined, b: MetadataRequest | PlainMessage<MetadataRequest> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.MetadataResponse
 */
export declare class MetadataResponse extends Message<MetadataResponse> {
  /**
   * this is the metadata associated with the ML model
   *
   * @generated from field: viam.service.mlmodel.v1.Metadata metadata = 1;
   */
  metadata?: Metadata;

  constructor(data?: PartialMessage<MetadataResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.MetadataResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetadataResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetadataResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetadataResponse;

  static equals(a: MetadataResponse | PlainMessage<MetadataResponse> | undefined, b: MetadataResponse | PlainMessage<MetadataResponse> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.Metadata
 */
export declare class Metadata extends Message<Metadata> {
  /**
   * name of the model
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * type of model e.g. object_detector, text_classifier
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * description of the model
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * the necessary input arrays/tensors for an inference, order matters
   *
   * @generated from field: repeated viam.service.mlmodel.v1.TensorInfo input_info = 4;
   */
  inputInfo: TensorInfo[];

  /**
   * the output arrays/tensors of the model, order matters
   *
   * @generated from field: repeated viam.service.mlmodel.v1.TensorInfo output_info = 5;
   */
  outputInfo: TensorInfo[];

  constructor(data?: PartialMessage<Metadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.Metadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata;

  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.TensorInfo
 */
export declare class TensorInfo extends Message<TensorInfo> {
  /**
   * name of the data in the array/tensor
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * description of the data in the array/tensor
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * data type of the array/tensor, e.g. float32, float64, uint8
   *
   * @generated from field: string data_type = 3;
   */
  dataType: string;

  /**
   * shape of the array/tensor (-1 for unknown)
   *
   * @generated from field: repeated int32 shape = 4;
   */
  shape: number[];

  /**
   * files associated with the array/tensor, like for category labels
   *
   * @generated from field: repeated viam.service.mlmodel.v1.File associated_files = 5;
   */
  associatedFiles: File[];

  /**
   * anything else you want to say
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<TensorInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.TensorInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TensorInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TensorInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TensorInfo;

  static equals(a: TensorInfo | PlainMessage<TensorInfo> | undefined, b: TensorInfo | PlainMessage<TensorInfo> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.File
 */
export declare class File extends Message<File> {
  /**
   * name of the file, with file extension
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * description of what the file contains
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * How to associate the arrays/tensors to the labels in the file
   *
   * @generated from field: viam.service.mlmodel.v1.LabelType label_type = 3;
   */
  labelType: LabelType;

  constructor(data?: PartialMessage<File>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.File";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File;

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataInt8
 */
export declare class FlatTensorDataInt8 extends Message<FlatTensorDataInt8> {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  constructor(data?: PartialMessage<FlatTensorDataInt8>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataInt8";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataInt8;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataInt8;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataInt8;

  static equals(a: FlatTensorDataInt8 | PlainMessage<FlatTensorDataInt8> | undefined, b: FlatTensorDataInt8 | PlainMessage<FlatTensorDataInt8> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataUInt8
 */
export declare class FlatTensorDataUInt8 extends Message<FlatTensorDataUInt8> {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  constructor(data?: PartialMessage<FlatTensorDataUInt8>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataUInt8";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataUInt8;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataUInt8;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataUInt8;

  static equals(a: FlatTensorDataUInt8 | PlainMessage<FlatTensorDataUInt8> | undefined, b: FlatTensorDataUInt8 | PlainMessage<FlatTensorDataUInt8> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataInt16
 */
export declare class FlatTensorDataInt16 extends Message<FlatTensorDataInt16> {
  /**
   * packs two 16-bit numbers per entry - explicitly little-endian
   * so big-endian producers/consumers must compensate
   *
   * @generated from field: repeated fixed32 data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataInt16>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataInt16";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataInt16;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataInt16;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataInt16;

  static equals(a: FlatTensorDataInt16 | PlainMessage<FlatTensorDataInt16> | undefined, b: FlatTensorDataInt16 | PlainMessage<FlatTensorDataInt16> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataUInt16
 */
export declare class FlatTensorDataUInt16 extends Message<FlatTensorDataUInt16> {
  /**
   * packs two 16-bit numbers per entry - explicitly little-endian
   * so big-endian producers/consumers must compensate
   *
   * @generated from field: repeated fixed32 data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataUInt16>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataUInt16";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataUInt16;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataUInt16;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataUInt16;

  static equals(a: FlatTensorDataUInt16 | PlainMessage<FlatTensorDataUInt16> | undefined, b: FlatTensorDataUInt16 | PlainMessage<FlatTensorDataUInt16> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataInt32
 */
export declare class FlatTensorDataInt32 extends Message<FlatTensorDataInt32> {
  /**
   * @generated from field: repeated sfixed32 data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataInt32>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataInt32";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataInt32;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataInt32;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataInt32;

  static equals(a: FlatTensorDataInt32 | PlainMessage<FlatTensorDataInt32> | undefined, b: FlatTensorDataInt32 | PlainMessage<FlatTensorDataInt32> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataUInt32
 */
export declare class FlatTensorDataUInt32 extends Message<FlatTensorDataUInt32> {
  /**
   * @generated from field: repeated fixed32 data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataUInt32>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataUInt32";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataUInt32;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataUInt32;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataUInt32;

  static equals(a: FlatTensorDataUInt32 | PlainMessage<FlatTensorDataUInt32> | undefined, b: FlatTensorDataUInt32 | PlainMessage<FlatTensorDataUInt32> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataInt64
 */
export declare class FlatTensorDataInt64 extends Message<FlatTensorDataInt64> {
  /**
   * @generated from field: repeated sfixed64 data = 1 [packed = true];
   */
  data: bigint[];

  constructor(data?: PartialMessage<FlatTensorDataInt64>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataInt64";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataInt64;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataInt64;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataInt64;

  static equals(a: FlatTensorDataInt64 | PlainMessage<FlatTensorDataInt64> | undefined, b: FlatTensorDataInt64 | PlainMessage<FlatTensorDataInt64> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataUInt64
 */
export declare class FlatTensorDataUInt64 extends Message<FlatTensorDataUInt64> {
  /**
   * @generated from field: repeated fixed64 data = 1 [packed = true];
   */
  data: bigint[];

  constructor(data?: PartialMessage<FlatTensorDataUInt64>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataUInt64";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataUInt64;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataUInt64;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataUInt64;

  static equals(a: FlatTensorDataUInt64 | PlainMessage<FlatTensorDataUInt64> | undefined, b: FlatTensorDataUInt64 | PlainMessage<FlatTensorDataUInt64> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataFloat
 */
export declare class FlatTensorDataFloat extends Message<FlatTensorDataFloat> {
  /**
   * @generated from field: repeated float data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataFloat>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataFloat";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataFloat;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataFloat;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataFloat;

  static equals(a: FlatTensorDataFloat | PlainMessage<FlatTensorDataFloat> | undefined, b: FlatTensorDataFloat | PlainMessage<FlatTensorDataFloat> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensorDataDouble
 */
export declare class FlatTensorDataDouble extends Message<FlatTensorDataDouble> {
  /**
   * @generated from field: repeated double data = 1 [packed = true];
   */
  data: number[];

  constructor(data?: PartialMessage<FlatTensorDataDouble>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensorDataDouble";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensorDataDouble;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensorDataDouble;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensorDataDouble;

  static equals(a: FlatTensorDataDouble | PlainMessage<FlatTensorDataDouble> | undefined, b: FlatTensorDataDouble | PlainMessage<FlatTensorDataDouble> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensor
 */
export declare class FlatTensor extends Message<FlatTensor> {
  /**
   * the shape of the provided tensor as a list of integer extents
   *
   * @generated from field: repeated fixed64 shape = 1;
   */
  shape: bigint[];

  /**
   * the flat data to be interpreted per the above shape information
   *
   * @generated from oneof viam.service.mlmodel.v1.FlatTensor.tensor
   */
  tensor: {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataInt8 int8_tensor = 2;
     */
    value: FlatTensorDataInt8;
    case: "int8Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataUInt8 uint8_tensor = 3;
     */
    value: FlatTensorDataUInt8;
    case: "uint8Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataInt16 int16_tensor = 4;
     */
    value: FlatTensorDataInt16;
    case: "int16Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataUInt16 uint16_tensor = 5;
     */
    value: FlatTensorDataUInt16;
    case: "uint16Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataInt32 int32_tensor = 6;
     */
    value: FlatTensorDataInt32;
    case: "int32Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataUInt32 uint32_tensor = 7;
     */
    value: FlatTensorDataUInt32;
    case: "uint32Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataInt64 int64_tensor = 8;
     */
    value: FlatTensorDataInt64;
    case: "int64Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataUInt64 uint64_tensor = 9;
     */
    value: FlatTensorDataUInt64;
    case: "uint64Tensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataFloat float_tensor = 10;
     */
    value: FlatTensorDataFloat;
    case: "floatTensor";
  } | {
    /**
     * @generated from field: viam.service.mlmodel.v1.FlatTensorDataDouble double_tensor = 11;
     */
    value: FlatTensorDataDouble;
    case: "doubleTensor";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<FlatTensor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensor;

  static equals(a: FlatTensor | PlainMessage<FlatTensor> | undefined, b: FlatTensor | PlainMessage<FlatTensor> | undefined): boolean;
}

/**
 * @generated from message viam.service.mlmodel.v1.FlatTensors
 */
export declare class FlatTensors extends Message<FlatTensors> {
  /**
   * A name-indexed collection of flat tensor objects
   *
   * @generated from field: map<string, viam.service.mlmodel.v1.FlatTensor> tensors = 1;
   */
  tensors: { [key: string]: FlatTensor };

  constructor(data?: PartialMessage<FlatTensors>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.mlmodel.v1.FlatTensors";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlatTensors;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlatTensors;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlatTensors;

  static equals(a: FlatTensors | PlainMessage<FlatTensors> | undefined, b: FlatTensors | PlainMessage<FlatTensors> | undefined): boolean;
}

