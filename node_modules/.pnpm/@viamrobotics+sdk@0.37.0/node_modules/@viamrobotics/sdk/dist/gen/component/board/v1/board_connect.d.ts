// @generated by protoc-gen-connect-es v1.5.0
// @generated from file component/board/v1/board.proto (package viam.component.board.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetDigitalInterruptValueRequest, GetDigitalInterruptValueResponse, GetGPIORequest, GetGPIOResponse, PWMFrequencyRequest, PWMFrequencyResponse, PWMRequest, PWMResponse, ReadAnalogReaderRequest, ReadAnalogReaderResponse, SetGPIORequest, SetGPIOResponse, SetPowerModeRequest, SetPowerModeResponse, SetPWMFrequencyRequest, SetPWMFrequencyResponse, SetPWMRequest, SetPWMResponse, StreamTicksRequest, StreamTicksResponse, WriteAnalogRequest, WriteAnalogResponse } from "./board_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse, GetGeometriesRequest, GetGeometriesResponse } from "../../../common/v1/common_pb.js";

/**
 * BoardService services all Boards associated with a robot
 *
 * @generated from service viam.component.board.v1.BoardService
 */
export declare const BoardService: {
  readonly typeName: "viam.component.board.v1.BoardService",
  readonly methods: {
    /**
     * @generated from rpc viam.component.board.v1.BoardService.SetGPIO
     */
    readonly setGPIO: {
      readonly name: "SetGPIO",
      readonly I: typeof SetGPIORequest,
      readonly O: typeof SetGPIOResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
     *
     * @generated from rpc viam.component.board.v1.BoardService.GetGPIO
     */
    readonly getGPIO: {
      readonly name: "GetGPIO",
      readonly I: typeof GetGPIORequest,
      readonly O: typeof GetGPIOResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PWM gets the duty cycle of the given pin of a board of the underlying robot.
     *
     * @generated from rpc viam.component.board.v1.BoardService.PWM
     */
    readonly pWM: {
      readonly name: "PWM",
      readonly I: typeof PWMRequest,
      readonly O: typeof PWMResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
     *
     * @generated from rpc viam.component.board.v1.BoardService.SetPWM
     */
    readonly setPWM: {
      readonly name: "SetPWM",
      readonly I: typeof SetPWMRequest,
      readonly O: typeof SetPWMResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
     *
     * @generated from rpc viam.component.board.v1.BoardService.PWMFrequency
     */
    readonly pWMFrequency: {
      readonly name: "PWMFrequency",
      readonly I: typeof PWMFrequencyRequest,
      readonly O: typeof PWMFrequencyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
     *
     * @generated from rpc viam.component.board.v1.BoardService.SetPWMFrequency
     */
    readonly setPWMFrequency: {
      readonly name: "SetPWMFrequency",
      readonly I: typeof SetPWMFrequencyRequest,
      readonly O: typeof SetPWMFrequencyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.component.board.v1.BoardService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
     *
     * @generated from rpc viam.component.board.v1.BoardService.ReadAnalogReader
     */
    readonly readAnalogReader: {
      readonly name: "ReadAnalogReader",
      readonly I: typeof ReadAnalogReaderRequest,
      readonly O: typeof ReadAnalogReaderResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * WriteAnalog writes the value to the analog writer of the board.
     *
     * @generated from rpc viam.component.board.v1.BoardService.WriteAnalog
     */
    readonly writeAnalog: {
      readonly name: "WriteAnalog",
      readonly I: typeof WriteAnalogRequest,
      readonly O: typeof WriteAnalogResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
     *
     * @generated from rpc viam.component.board.v1.BoardService.GetDigitalInterruptValue
     */
    readonly getDigitalInterruptValue: {
      readonly name: "GetDigitalInterruptValue",
      readonly I: typeof GetDigitalInterruptValueRequest,
      readonly O: typeof GetDigitalInterruptValueResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * StreamTicks starts a stream of ticks for the given digital interrupts.
     *
     * @generated from rpc viam.component.board.v1.BoardService.StreamTicks
     */
    readonly streamTicks: {
      readonly name: "StreamTicks",
      readonly I: typeof StreamTicksRequest,
      readonly O: typeof StreamTicksResponse,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
     *
     * @generated from rpc viam.component.board.v1.BoardService.SetPowerMode
     */
    readonly setPowerMode: {
      readonly name: "SetPowerMode",
      readonly I: typeof SetPowerModeRequest,
      readonly O: typeof SetPowerModeResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGeometries returns the geometries of the component in their current configuration.
     *
     * @generated from rpc viam.component.board.v1.BoardService.GetGeometries
     */
    readonly getGeometries: {
      readonly name: "GetGeometries",
      readonly I: typeof GetGeometriesRequest,
      readonly O: typeof GetGeometriesResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

