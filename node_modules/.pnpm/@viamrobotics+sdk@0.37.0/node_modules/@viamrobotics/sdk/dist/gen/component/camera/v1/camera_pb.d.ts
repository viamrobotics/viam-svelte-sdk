// @generated by protoc-gen-es v1.10.0
// @generated from file component/camera/v1/camera.proto (package viam.component.camera.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ResponseMetadata } from "../../../common/v1/common_pb.js";

/**
 * @generated from enum viam.component.camera.v1.Format
 */
export declare enum Format {
  /**
   * @generated from enum value: FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FORMAT_RAW_RGBA = 1;
   */
  RAW_RGBA = 1,

  /**
   * @generated from enum value: FORMAT_RAW_DEPTH = 2;
   */
  RAW_DEPTH = 2,

  /**
   * @generated from enum value: FORMAT_JPEG = 3;
   */
  JPEG = 3,

  /**
   * @generated from enum value: FORMAT_PNG = 4;
   */
  PNG = 4,
}

/**
 * @generated from message viam.component.camera.v1.GetImageRequest
 */
export declare class GetImageRequest extends Message<GetImageRequest> {
  /**
   * Name of a camera
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Requested MIME type of response
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<GetImageRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetImageRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImageRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImageRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImageRequest;

  static equals(a: GetImageRequest | PlainMessage<GetImageRequest> | undefined, b: GetImageRequest | PlainMessage<GetImageRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetImageResponse
 */
export declare class GetImageResponse extends Message<GetImageResponse> {
  /**
   * Actual MIME type of response
   *
   * @generated from field: string mime_type = 1;
   */
  mimeType: string;

  /**
   * Frame in bytes
   *
   * @generated from field: bytes image = 2;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<GetImageResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetImageResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImageResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImageResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImageResponse;

  static equals(a: GetImageResponse | PlainMessage<GetImageResponse> | undefined, b: GetImageResponse | PlainMessage<GetImageResponse> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetImagesRequest
 */
export declare class GetImagesRequest extends Message<GetImagesRequest> {
  /**
   * Name of a camera
   *
   * @generated from field: string name = 1;
   */
  name: string;

  constructor(data?: PartialMessage<GetImagesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetImagesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImagesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImagesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImagesRequest;

  static equals(a: GetImagesRequest | PlainMessage<GetImagesRequest> | undefined, b: GetImagesRequest | PlainMessage<GetImagesRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetImagesResponse
 */
export declare class GetImagesResponse extends Message<GetImagesResponse> {
  /**
   * list of images returned from the camera system
   *
   * @generated from field: repeated viam.component.camera.v1.Image images = 1;
   */
  images: Image[];

  /**
   * contains timestamp data
   *
   * @generated from field: viam.common.v1.ResponseMetadata response_metadata = 84260;
   */
  responseMetadata?: ResponseMetadata;

  constructor(data?: PartialMessage<GetImagesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetImagesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetImagesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetImagesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetImagesResponse;

  static equals(a: GetImagesResponse | PlainMessage<GetImagesResponse> | undefined, b: GetImagesResponse | PlainMessage<GetImagesResponse> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.Image
 */
export declare class Image extends Message<Image> {
  /**
   * the name of the sensor where the image came from
   *
   * @generated from field: string source_name = 1;
   */
  sourceName: string;

  /**
   * format of the response image bytes
   *
   * @generated from field: viam.component.camera.v1.Format format = 2;
   */
  format: Format;

  /**
   * image in bytes
   *
   * @generated from field: bytes image = 3;
   */
  image: Uint8Array;

  constructor(data?: PartialMessage<Image>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.Image";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Image;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Image;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Image;

  static equals(a: Image | PlainMessage<Image> | undefined, b: Image | PlainMessage<Image> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.RenderFrameRequest
 */
export declare class RenderFrameRequest extends Message<RenderFrameRequest> {
  /**
   * Name of a camera
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Requested MIME type of response
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<RenderFrameRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.RenderFrameRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderFrameRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderFrameRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderFrameRequest;

  static equals(a: RenderFrameRequest | PlainMessage<RenderFrameRequest> | undefined, b: RenderFrameRequest | PlainMessage<RenderFrameRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetPointCloudRequest
 */
export declare class GetPointCloudRequest extends Message<GetPointCloudRequest> {
  /**
   * Name of a camera
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Requested MIME type of response
   *
   * @generated from field: string mime_type = 2;
   */
  mimeType: string;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<GetPointCloudRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetPointCloudRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPointCloudRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPointCloudRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPointCloudRequest;

  static equals(a: GetPointCloudRequest | PlainMessage<GetPointCloudRequest> | undefined, b: GetPointCloudRequest | PlainMessage<GetPointCloudRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetPointCloudResponse
 */
export declare class GetPointCloudResponse extends Message<GetPointCloudResponse> {
  /**
   * Actual MIME type of response
   *
   * @generated from field: string mime_type = 1;
   */
  mimeType: string;

  /**
   * Frame in bytes
   *
   * @generated from field: bytes point_cloud = 2;
   */
  pointCloud: Uint8Array;

  constructor(data?: PartialMessage<GetPointCloudResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetPointCloudResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPointCloudResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPointCloudResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPointCloudResponse;

  static equals(a: GetPointCloudResponse | PlainMessage<GetPointCloudResponse> | undefined, b: GetPointCloudResponse | PlainMessage<GetPointCloudResponse> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetPropertiesRequest
 */
export declare class GetPropertiesRequest extends Message<GetPropertiesRequest> {
  /**
   * Name of a camera
   *
   * @generated from field: string name = 1;
   */
  name: string;

  constructor(data?: PartialMessage<GetPropertiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetPropertiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPropertiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPropertiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPropertiesRequest;

  static equals(a: GetPropertiesRequest | PlainMessage<GetPropertiesRequest> | undefined, b: GetPropertiesRequest | PlainMessage<GetPropertiesRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.GetPropertiesResponse
 */
export declare class GetPropertiesResponse extends Message<GetPropertiesResponse> {
  /**
   * A boolean property determining whether the camera supports the return of pointcloud data
   *
   * @generated from field: bool supports_pcd = 1;
   */
  supportsPcd: boolean;

  /**
   * Parameters for doing a perspective of a 3D scene to a 2D plane
   * If camera does not provide intrinsic parameters, leave the field empty
   * Initializing the parameters with 0-values is considered an error
   *
   * @generated from field: viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2;
   */
  intrinsicParameters?: IntrinsicParameters;

  /**
   * Parameters for modeling lens distortion in cameras
   * If camera does not provide distortion parameters, leave the field empty
   * Initializing the parameters with 0-values is considered an error
   *
   * @generated from field: viam.component.camera.v1.DistortionParameters distortion_parameters = 3;
   */
  distortionParameters?: DistortionParameters;

  /**
   * Supported MIME types by the camera
   *
   * @generated from field: repeated string mime_types = 4;
   */
  mimeTypes: string[];

  /**
   * Optional camera frame rate for image capture timing
   *
   * @generated from field: optional float frame_rate = 5;
   */
  frameRate?: number;

  constructor(data?: PartialMessage<GetPropertiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.GetPropertiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPropertiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPropertiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPropertiesResponse;

  static equals(a: GetPropertiesResponse | PlainMessage<GetPropertiesResponse> | undefined, b: GetPropertiesResponse | PlainMessage<GetPropertiesResponse> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.Webcams
 */
export declare class Webcams extends Message<Webcams> {
  /**
   * @generated from field: repeated viam.component.camera.v1.Webcam webcams = 1;
   */
  webcams: Webcam[];

  constructor(data?: PartialMessage<Webcams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.Webcams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Webcams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Webcams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Webcams;

  static equals(a: Webcams | PlainMessage<Webcams> | undefined, b: Webcams | PlainMessage<Webcams> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.Webcam
 */
export declare class Webcam extends Message<Webcam> {
  /**
   * Camera driver label (for internal use only)
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * Camera driver status
   *
   * @generated from field: string status = 2;
   */
  status: string;

  /**
   * Camera properties
   *
   * @generated from field: repeated viam.component.camera.v1.Property properties = 3;
   */
  properties: Property[];

  /**
   * Camera human-readable driver name
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Camera unique identifier
   *
   * @generated from field: string id = 5;
   */
  id: string;

  constructor(data?: PartialMessage<Webcam>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.Webcam";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Webcam;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Webcam;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Webcam;

  static equals(a: Webcam | PlainMessage<Webcam> | undefined, b: Webcam | PlainMessage<Webcam> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.Property
 */
export declare class Property extends Message<Property> {
  /**
   * Video resolution width in px
   *
   * @generated from field: int32 width_px = 1;
   */
  widthPx: number;

  /**
   * Video resolution height in px
   *
   * @generated from field: int32 height_px = 2;
   */
  heightPx: number;

  /**
   * Video frame format
   *
   * @generated from field: string frame_format = 3;
   */
  frameFormat: string;

  /**
   * Video frame rate in fps
   *
   * @generated from field: float frame_rate = 4;
   */
  frameRate: number;

  constructor(data?: PartialMessage<Property>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.Property";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Property;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Property;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Property;

  static equals(a: Property | PlainMessage<Property> | undefined, b: Property | PlainMessage<Property> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.IntrinsicParameters
 */
export declare class IntrinsicParameters extends Message<IntrinsicParameters> {
  /**
   * @generated from field: uint32 width_px = 1;
   */
  widthPx: number;

  /**
   * @generated from field: uint32 height_px = 2;
   */
  heightPx: number;

  /**
   * @generated from field: double focal_x_px = 3;
   */
  focalXPx: number;

  /**
   * @generated from field: double focal_y_px = 4;
   */
  focalYPx: number;

  /**
   * @generated from field: double center_x_px = 5;
   */
  centerXPx: number;

  /**
   * @generated from field: double center_y_px = 6;
   */
  centerYPx: number;

  constructor(data?: PartialMessage<IntrinsicParameters>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.IntrinsicParameters";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntrinsicParameters;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntrinsicParameters;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntrinsicParameters;

  static equals(a: IntrinsicParameters | PlainMessage<IntrinsicParameters> | undefined, b: IntrinsicParameters | PlainMessage<IntrinsicParameters> | undefined): boolean;
}

/**
 * @generated from message viam.component.camera.v1.DistortionParameters
 */
export declare class DistortionParameters extends Message<DistortionParameters> {
  /**
   * @generated from field: string model = 1;
   */
  model: string;

  /**
   * @generated from field: repeated double parameters = 2;
   */
  parameters: number[];

  constructor(data?: PartialMessage<DistortionParameters>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.camera.v1.DistortionParameters";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistortionParameters;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistortionParameters;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistortionParameters;

  static equals(a: DistortionParameters | PlainMessage<DistortionParameters> | undefined, b: DistortionParameters | PlainMessage<DistortionParameters> | undefined): boolean;
}

