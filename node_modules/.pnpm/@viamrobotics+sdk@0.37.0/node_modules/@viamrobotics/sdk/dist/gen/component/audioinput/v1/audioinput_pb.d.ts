// @generated by protoc-gen-es v1.10.0
// @generated from file component/audioinput/v1/audioinput.proto (package viam.component.audioinput.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum viam.component.audioinput.v1.SampleFormat
 */
export declare enum SampleFormat {
  /**
   * @generated from enum value: SAMPLE_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SAMPLE_FORMAT_INT16_INTERLEAVED = 1;
   */
  INT16_INTERLEAVED = 1,

  /**
   * @generated from enum value: SAMPLE_FORMAT_FLOAT32_INTERLEAVED = 2;
   */
  FLOAT32_INTERLEAVED = 2,
}

/**
 * @generated from message viam.component.audioinput.v1.RecordRequest
 */
export declare class RecordRequest extends Message<RecordRequest> {
  /**
   * Name of an audio input
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<RecordRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.RecordRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecordRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecordRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecordRequest;

  static equals(a: RecordRequest | PlainMessage<RecordRequest> | undefined, b: RecordRequest | PlainMessage<RecordRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.AudioChunkInfo
 */
export declare class AudioChunkInfo extends Message<AudioChunkInfo> {
  /**
   * Actual sample encoding format of the response
   *
   * @generated from field: viam.component.audioinput.v1.SampleFormat sample_format = 1;
   */
  sampleFormat: SampleFormat;

  /**
   * @generated from field: uint32 channels = 2;
   */
  channels: number;

  /**
   * @generated from field: int64 sampling_rate = 3;
   */
  samplingRate: bigint;

  constructor(data?: PartialMessage<AudioChunkInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.AudioChunkInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioChunkInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioChunkInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioChunkInfo;

  static equals(a: AudioChunkInfo | PlainMessage<AudioChunkInfo> | undefined, b: AudioChunkInfo | PlainMessage<AudioChunkInfo> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.AudioChunk
 */
export declare class AudioChunk extends Message<AudioChunk> {
  /**
   * Data is PCM data that is organized according to the sample format
   * along with its possible interleaving. Data in each format is
   * Little Endian.
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * Length is the number of samples
   *
   * @generated from field: uint32 length = 2;
   */
  length: number;

  constructor(data?: PartialMessage<AudioChunk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.AudioChunk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioChunk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioChunk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioChunk;

  static equals(a: AudioChunk | PlainMessage<AudioChunk> | undefined, b: AudioChunk | PlainMessage<AudioChunk> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.ChunksRequest
 */
export declare class ChunksRequest extends Message<ChunksRequest> {
  /**
   * Name of an audio input
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Requested sample encoding format of the response
   *
   * @generated from field: viam.component.audioinput.v1.SampleFormat sample_format = 2;
   */
  sampleFormat: SampleFormat;

  constructor(data?: PartialMessage<ChunksRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.ChunksRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChunksRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChunksRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChunksRequest;

  static equals(a: ChunksRequest | PlainMessage<ChunksRequest> | undefined, b: ChunksRequest | PlainMessage<ChunksRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.ChunksResponse
 */
export declare class ChunksResponse extends Message<ChunksResponse> {
  /**
   * @generated from oneof viam.component.audioinput.v1.ChunksResponse.type
   */
  type: {
    /**
     * @generated from field: viam.component.audioinput.v1.AudioChunkInfo info = 1;
     */
    value: AudioChunkInfo;
    case: "info";
  } | {
    /**
     * @generated from field: viam.component.audioinput.v1.AudioChunk chunk = 2;
     */
    value: AudioChunk;
    case: "chunk";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ChunksResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.ChunksResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChunksResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChunksResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChunksResponse;

  static equals(a: ChunksResponse | PlainMessage<ChunksResponse> | undefined, b: ChunksResponse | PlainMessage<ChunksResponse> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.PropertiesRequest
 */
export declare class PropertiesRequest extends Message<PropertiesRequest> {
  /**
   * Name of an audio input
   *
   * @generated from field: string name = 1;
   */
  name: string;

  constructor(data?: PartialMessage<PropertiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.PropertiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertiesRequest;

  static equals(a: PropertiesRequest | PlainMessage<PropertiesRequest> | undefined, b: PropertiesRequest | PlainMessage<PropertiesRequest> | undefined): boolean;
}

/**
 * @generated from message viam.component.audioinput.v1.PropertiesResponse
 */
export declare class PropertiesResponse extends Message<PropertiesResponse> {
  /**
   * @generated from field: uint32 channel_count = 1;
   */
  channelCount: number;

  /**
   * @generated from field: google.protobuf.Duration latency = 2;
   */
  latency?: Duration;

  /**
   * @generated from field: uint32 sample_rate = 3;
   */
  sampleRate: number;

  /**
   * @generated from field: uint32 sample_size = 4;
   */
  sampleSize: number;

  /**
   * @generated from field: bool is_big_endian = 5;
   */
  isBigEndian: boolean;

  /**
   * @generated from field: bool is_float = 6;
   */
  isFloat: boolean;

  /**
   * @generated from field: bool is_interleaved = 7;
   */
  isInterleaved: boolean;

  constructor(data?: PartialMessage<PropertiesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.component.audioinput.v1.PropertiesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PropertiesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PropertiesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PropertiesResponse;

  static equals(a: PropertiesResponse | PlainMessage<PropertiesResponse> | undefined, b: PropertiesResponse | PlainMessage<PropertiesResponse> | undefined): boolean;
}

