// @generated by protoc-gen-connect-es v1.5.0
// @generated from file service/shell/v1/shell.proto (package viam.service.shell.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CopyFilesFromMachineRequest, CopyFilesFromMachineResponse, CopyFilesToMachineRequest, CopyFilesToMachineResponse, ShellRequest, ShellResponse } from "./shell_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse } from "../../../common/v1/common_pb.js";

/**
 * A ShellService service allows access to an interactive shell experience, including
 * utilities commonly found in tandem with other secure shells.
 *
 * @generated from service viam.service.shell.v1.ShellService
 */
export declare const ShellService: {
  readonly typeName: "viam.service.shell.v1.ShellService",
  readonly methods: {
    /**
     * Shell starts a shell with an input and output pipe.
     *
     * @generated from rpc viam.service.shell.v1.ShellService.Shell
     */
    readonly shell: {
      readonly name: "Shell",
      readonly I: typeof ShellRequest,
      readonly O: typeof ShellResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * CopyFilesToMachines copies a stream of files from a client to the connected-to machine.
     * Initially, metadata is sent to describe the destination in the filesystem in addition
     * to what kind of file(s) are being sent.
     * Once metadata is sent, the file transfer can proceed where one-by-one, file data is sent
     * until EOF per file.
     * After each file is sent, the machine must respond with an ACK before the next file can
     * be sent. This provides back-pressure and ordering.
     * The order in which individual files are sent does not matter; that is, if traversing a
     * directory, copying depth-first, breadth-first, or any other algorithm does not matter.
     * Permissions and metadata on files copied are only preserved if the preserve option is
     * set in the initial request metadata.
     *
     * @generated from rpc viam.service.shell.v1.ShellService.CopyFilesToMachine
     */
    readonly copyFilesToMachine: {
      readonly name: "CopyFilesToMachine",
      readonly I: typeof CopyFilesToMachineRequest,
      readonly O: typeof CopyFilesToMachineResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * CopyFilesFromMachine copies a stream of files from a connected-to machine to the calling client.
     * Essentially, it is the inverse of CopyFilesToMachine with the same ACK mechanism in reverse.
     * The initial metadata request will request the paths to copy along with if permissions should
     * be preserved (and consequently sent over the wire).
     *
     * @generated from rpc viam.service.shell.v1.ShellService.CopyFilesFromMachine
     */
    readonly copyFilesFromMachine: {
      readonly name: "CopyFilesFromMachine",
      readonly I: typeof CopyFilesFromMachineRequest,
      readonly O: typeof CopyFilesFromMachineResponse,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.service.shell.v1.ShellService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

