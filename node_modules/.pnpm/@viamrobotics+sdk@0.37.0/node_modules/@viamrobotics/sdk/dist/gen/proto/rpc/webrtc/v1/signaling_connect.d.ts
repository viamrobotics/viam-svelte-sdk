// @generated by protoc-gen-connect-es v1.5.0
// @generated from file proto/rpc/webrtc/v1/signaling.proto (package proto.rpc.webrtc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AnswerRequest, AnswerResponse, CallRequest, CallResponse, CallUpdateRequest, CallUpdateResponse, OptionalWebRTCConfigRequest, OptionalWebRTCConfigResponse } from "./signaling_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * A SignalingService provides the means to have one client "call" another
 * client using the Session Description Protocol (SDP).
 *
 * @generated from service proto.rpc.webrtc.v1.SignalingService
 */
export declare const SignalingService: {
  readonly typeName: "proto.rpc.webrtc.v1.SignalingService",
  readonly methods: {
    /**
     * Call makes an offer to a client that it expects an answer to. The host
     * of the client in question should be identified in the rpc-host metadata
     * field.
     * Note: Based on how this is a server streaming responnse to the caller,
     * we do not have a good way of knowing if the caller has disappeared.
     * Depending on answerer timeouts and concurrency limits, this can result in
     * hangs on the answerer waiting for a connection to establish, which in turn
     * can result in the caller waiting for an answerer to be listening.
     *
     * @generated from rpc proto.rpc.webrtc.v1.SignalingService.Call
     */
    readonly call: {
      readonly name: "Call",
      readonly I: typeof CallRequest,
      readonly O: typeof CallResponse,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * CallUpdate is used to send additional info in relation to a Call.
     * The host of the client for the call in question should be identified
     * in the rpc-host metadata field.
     * In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
     * this should be removed in favor of a bidirectional stream on Call.
     *
     * @generated from rpc proto.rpc.webrtc.v1.SignalingService.CallUpdate
     */
    readonly callUpdate: {
      readonly name: "CallUpdate",
      readonly I: typeof CallUpdateRequest,
      readonly O: typeof CallUpdateResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Answer sets up an answering service where the caller answers call offers
     * and responds with answers.
     * The host(s) to answer for should be in the rpc-host metadata field.
     *
     * @generated from rpc proto.rpc.webrtc.v1.SignalingService.Answer
     */
    readonly answer: {
      readonly name: "Answer",
      readonly I: typeof AnswerResponse,
      readonly O: typeof AnswerRequest,
      readonly kind: MethodKind.BiDiStreaming,
    },
    /**
     * OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
     * The host to get a config for must be in the rpc-host metadata field.
     *
     * @generated from rpc proto.rpc.webrtc.v1.SignalingService.OptionalWebRTCConfig
     */
    readonly optionalWebRTCConfig: {
      readonly name: "OptionalWebRTCConfig",
      readonly I: typeof OptionalWebRTCConfigRequest,
      readonly O: typeof OptionalWebRTCConfigResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

