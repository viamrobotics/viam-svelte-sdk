// @generated by protoc-gen-es v1.10.0
// @generated from file service/shell/v1/shell.proto (package viam.service.shell.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct, Timestamp } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * CopyFilesSourceType indicates what will be copied. It's important
 * to disambiguate the single directory case from the multiple files
 * case in order to indicate that the user's intent is to copy a directory
 * into a single location which may result in a new top-level directory versus
 * the cause of multiples files that always go into the existing target destination.
 *
 * @generated from enum viam.service.shell.v1.CopyFilesSourceType
 */
export declare enum CopyFilesSourceType {
  /**
   * @generated from enum value: COPY_FILES_SOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COPY_FILES_SOURCE_TYPE_SINGLE_FILE = 1;
   */
  SINGLE_FILE = 1,

  /**
   * @generated from enum value: COPY_FILES_SOURCE_TYPE_SINGLE_DIRECTORY = 2;
   */
  SINGLE_DIRECTORY = 2,

  /**
   * @generated from enum value: COPY_FILES_SOURCE_TYPE_MULTIPLE_FILES = 3;
   */
  MULTIPLE_FILES = 3,
}

/**
 * @generated from message viam.service.shell.v1.ShellRequest
 */
export declare class ShellRequest extends Message<ShellRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string data_in = 2;
   */
  dataIn: string;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<ShellRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.ShellRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShellRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShellRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShellRequest;

  static equals(a: ShellRequest | PlainMessage<ShellRequest> | undefined, b: ShellRequest | PlainMessage<ShellRequest> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.ShellResponse
 */
export declare class ShellResponse extends Message<ShellResponse> {
  /**
   * @generated from field: string data_out = 1;
   */
  dataOut: string;

  /**
   * @generated from field: string data_err = 2;
   */
  dataErr: string;

  /**
   * @generated from field: bool eof = 3;
   */
  eof: boolean;

  constructor(data?: PartialMessage<ShellResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.ShellResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShellResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShellResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShellResponse;

  static equals(a: ShellResponse | PlainMessage<ShellResponse> | undefined, b: ShellResponse | PlainMessage<ShellResponse> | undefined): boolean;
}

/**
 * FileData contains partial (sometimes complete) information about a File.
 * When transmitting FileData with CopyFilesToMachine and CopyFilesFromMachine,
 * it MUST initially contain its name, size, and is_dir. Depending on whether
 * preservation is in use, the mod_time and mode fields may be initially set
 * as well. On all transmissions, data and eof must be set. Because files are
 * sent one-by-one, it is currently permitted to exclude the initially set fields.
 * If this ever changes, a new scheme should be used for identifying files (like a number)
 * in order to reduce data transmission while allowing out-of-order transfers.
 * eof must be true and its own message once no more data is to be sent for this file.
 *
 * @generated from message viam.service.shell.v1.FileData
 */
export declare class FileData extends Message<FileData> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: int64 size = 2;
   */
  size: bigint;

  /**
   * @generated from field: bool is_dir = 3;
   */
  isDir: boolean;

  /**
   * @generated from field: bytes data = 4;
   */
  data: Uint8Array;

  /**
   * @generated from field: bool eof = 5;
   */
  eof: boolean;

  /**
   * Note(erd): maybe support access time in the future if needed
   *
   * @generated from field: optional google.protobuf.Timestamp mod_time = 6;
   */
  modTime?: Timestamp;

  /**
   * @generated from field: optional uint32 mode = 7;
   */
  mode?: number;

  constructor(data?: PartialMessage<FileData>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.FileData";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileData;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileData;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileData;

  static equals(a: FileData | PlainMessage<FileData> | undefined, b: FileData | PlainMessage<FileData> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesToMachineRequestMetadata
 */
export declare class CopyFilesToMachineRequestMetadata extends Message<CopyFilesToMachineRequestMetadata> {
  /**
   * name is the service name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * source_type is the type of files that will be transmitted in this request stream.
   *
   * @generated from field: viam.service.shell.v1.CopyFilesSourceType source_type = 2;
   */
  sourceType: CopyFilesSourceType;

  /**
   * destination is where the files should be placed. The receiver can choose to
   * reasonably modify this destination based on its implementation semantics.
   *
   * @generated from field: string destination = 3;
   */
  destination: string;

  /**
   * preserve indicates the the receiver should use the metadata in the file to reflect
   * the same state in its filesystem as applicable.
   *
   * @generated from field: bool preserve = 4;
   */
  preserve: boolean;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<CopyFilesToMachineRequestMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesToMachineRequestMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesToMachineRequestMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesToMachineRequestMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesToMachineRequestMetadata;

  static equals(a: CopyFilesToMachineRequestMetadata | PlainMessage<CopyFilesToMachineRequestMetadata> | undefined, b: CopyFilesToMachineRequestMetadata | PlainMessage<CopyFilesToMachineRequestMetadata> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesToMachineRequest
 */
export declare class CopyFilesToMachineRequest extends Message<CopyFilesToMachineRequest> {
  /**
   * @generated from oneof viam.service.shell.v1.CopyFilesToMachineRequest.request
   */
  request: {
    /**
     * metadata is sent first and only once.
     *
     * @generated from field: viam.service.shell.v1.CopyFilesToMachineRequestMetadata metadata = 1;
     */
    value: CopyFilesToMachineRequestMetadata;
    case: "metadata";
  } | {
    /**
     * file_data is sent only after metadata. All data MUST be sent
     * in order per-file.
     *
     * @generated from field: viam.service.shell.v1.FileData file_data = 2;
     */
    value: FileData;
    case: "fileData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CopyFilesToMachineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesToMachineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesToMachineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesToMachineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesToMachineRequest;

  static equals(a: CopyFilesToMachineRequest | PlainMessage<CopyFilesToMachineRequest> | undefined, b: CopyFilesToMachineRequest | PlainMessage<CopyFilesToMachineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesToMachineResponse
 */
export declare class CopyFilesToMachineResponse extends Message<CopyFilesToMachineResponse> {
  /**
   * value does not matter here but responses must be sent after every
   * file has been received.
   *
   * @generated from field: bool ack_last_file = 1;
   */
  ackLastFile: boolean;

  constructor(data?: PartialMessage<CopyFilesToMachineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesToMachineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesToMachineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesToMachineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesToMachineResponse;

  static equals(a: CopyFilesToMachineResponse | PlainMessage<CopyFilesToMachineResponse> | undefined, b: CopyFilesToMachineResponse | PlainMessage<CopyFilesToMachineResponse> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesFromMachineRequestMetadata
 */
export declare class CopyFilesFromMachineRequestMetadata extends Message<CopyFilesFromMachineRequestMetadata> {
  /**
   * name is the service name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * paths are the paths to copy from and send back over the wire.
   *
   * @generated from field: repeated string paths = 2;
   */
  paths: string[];

  /**
   * allow_recursion indicates if directories should be recursed into. If
   * a directory is encountered and this is false, an error MUST occur.
   *
   * @generated from field: bool allow_recursion = 3;
   */
  allowRecursion: boolean;

  /**
   * preserve indicates the the receiver should provide the metadata in the file
   * to reflect the same state in the sender's filesystem as applicable.
   *
   * @generated from field: bool preserve = 4;
   */
  preserve: boolean;

  /**
   * Additional arguments to the method
   *
   * @generated from field: google.protobuf.Struct extra = 99;
   */
  extra?: Struct;

  constructor(data?: PartialMessage<CopyFilesFromMachineRequestMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesFromMachineRequestMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesFromMachineRequestMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesFromMachineRequestMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesFromMachineRequestMetadata;

  static equals(a: CopyFilesFromMachineRequestMetadata | PlainMessage<CopyFilesFromMachineRequestMetadata> | undefined, b: CopyFilesFromMachineRequestMetadata | PlainMessage<CopyFilesFromMachineRequestMetadata> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesFromMachineRequest
 */
export declare class CopyFilesFromMachineRequest extends Message<CopyFilesFromMachineRequest> {
  /**
   * @generated from oneof viam.service.shell.v1.CopyFilesFromMachineRequest.request
   */
  request: {
    /**
     * metadata is sent first and only once.
     *
     * @generated from field: viam.service.shell.v1.CopyFilesFromMachineRequestMetadata metadata = 1;
     */
    value: CopyFilesFromMachineRequestMetadata;
    case: "metadata";
  } | {
    /**
     * ack_last_file is sent only after metadata and after each file has been received.
     * The value does not matter.
     *
     * @generated from field: bool ack_last_file = 2;
     */
    value: boolean;
    case: "ackLastFile";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CopyFilesFromMachineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesFromMachineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesFromMachineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesFromMachineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesFromMachineRequest;

  static equals(a: CopyFilesFromMachineRequest | PlainMessage<CopyFilesFromMachineRequest> | undefined, b: CopyFilesFromMachineRequest | PlainMessage<CopyFilesFromMachineRequest> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesFromMachineResponseMetadata
 */
export declare class CopyFilesFromMachineResponseMetadata extends Message<CopyFilesFromMachineResponseMetadata> {
  /**
   * source_type is the type of files that will be transmitted in this response stream.
   *
   * @generated from field: viam.service.shell.v1.CopyFilesSourceType source_type = 1;
   */
  sourceType: CopyFilesSourceType;

  constructor(data?: PartialMessage<CopyFilesFromMachineResponseMetadata>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesFromMachineResponseMetadata";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesFromMachineResponseMetadata;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesFromMachineResponseMetadata;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesFromMachineResponseMetadata;

  static equals(a: CopyFilesFromMachineResponseMetadata | PlainMessage<CopyFilesFromMachineResponseMetadata> | undefined, b: CopyFilesFromMachineResponseMetadata | PlainMessage<CopyFilesFromMachineResponseMetadata> | undefined): boolean;
}

/**
 * @generated from message viam.service.shell.v1.CopyFilesFromMachineResponse
 */
export declare class CopyFilesFromMachineResponse extends Message<CopyFilesFromMachineResponse> {
  /**
   * @generated from oneof viam.service.shell.v1.CopyFilesFromMachineResponse.response
   */
  response: {
    /**
     * metadata is sent first and only once.
     *
     * @generated from field: viam.service.shell.v1.CopyFilesFromMachineResponseMetadata metadata = 1;
     */
    value: CopyFilesFromMachineResponseMetadata;
    case: "metadata";
  } | {
    /**
     * file_data is sent only after metadata. All data MUST be sent
     * in order per-file.
     *
     * @generated from field: viam.service.shell.v1.FileData file_data = 2;
     */
    value: FileData;
    case: "fileData";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<CopyFilesFromMachineResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.service.shell.v1.CopyFilesFromMachineResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CopyFilesFromMachineResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CopyFilesFromMachineResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CopyFilesFromMachineResponse;

  static equals(a: CopyFilesFromMachineResponse | PlainMessage<CopyFilesFromMachineResponse> | undefined, b: CopyFilesFromMachineResponse | PlainMessage<CopyFilesFromMachineResponse> | undefined): boolean;
}

