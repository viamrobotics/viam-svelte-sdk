// @generated by protoc-gen-es v1.10.0
// @generated from file app/v1/robot.proto (package viam.app.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, Duration, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Struct } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Geometry, LogEntry, ResourceName } from "../../common/v1/common_pb.js";

/**
 * @generated from enum viam.app.v1.CredentialsType
 */
export declare enum CredentialsType {
  /**
   * @generated from enum value: CREDENTIALS_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CREDENTIALS_TYPE_INTERNAL = 1;
   */
  INTERNAL = 1,

  /**
   * @generated from enum value: CREDENTIALS_TYPE_API_KEY = 2;
   */
  API_KEY = 2,

  /**
   * @generated from enum value: CREDENTIALS_TYPE_ROBOT_SECRET = 3;
   */
  ROBOT_SECRET = 3,

  /**
   * @generated from enum value: CREDENTIALS_TYPE_ROBOT_LOCATION_SECRET = 4;
   */
  ROBOT_LOCATION_SECRET = 4,
}

/**
 * @generated from message viam.app.v1.RobotConfig
 */
export declare class RobotConfig extends Message<RobotConfig> {
  /**
   * @generated from field: viam.app.v1.CloudConfig cloud = 1;
   */
  cloud?: CloudConfig;

  /**
   * @generated from field: repeated viam.app.v1.RemoteConfig remotes = 2;
   */
  remotes: RemoteConfig[];

  /**
   * @generated from field: repeated viam.app.v1.ComponentConfig components = 3;
   */
  components: ComponentConfig[];

  /**
   * @generated from field: repeated viam.app.v1.ProcessConfig processes = 4;
   */
  processes: ProcessConfig[];

  /**
   * @generated from field: repeated viam.app.v1.ServiceConfig services = 5;
   */
  services: ServiceConfig[];

  /**
   * @generated from field: optional viam.app.v1.NetworkConfig network = 6;
   */
  network?: NetworkConfig;

  /**
   * @generated from field: optional viam.app.v1.AuthConfig auth = 7;
   */
  auth?: AuthConfig;

  /**
   * Turns on debug mode for robot, adding an echo server and more logging and tracing. Only works after restart
   *
   * @generated from field: optional bool debug = 8;
   */
  debug?: boolean;

  /**
   * @generated from field: repeated viam.app.v1.ModuleConfig modules = 9;
   */
  modules: ModuleConfig[];

  /**
   * @generated from field: optional bool disable_partial_start = 10;
   */
  disablePartialStart?: boolean;

  /**
   * @generated from field: repeated viam.app.v1.PackageConfig packages = 11;
   */
  packages: PackageConfig[];

  /**
   * @generated from field: repeated viam.app.v1.AppValidationStatus overwrite_fragment_status = 12;
   */
  overwriteFragmentStatus: AppValidationStatus[];

  /**
   * Turns on pprof http server on localhost. By default false.
   *
   * @generated from field: bool enable_web_profile = 13;
   */
  enableWebProfile: boolean;

  /**
   * @generated from field: repeated viam.app.v1.LogPatternConfig log = 14;
   */
  log: LogPatternConfig[];

  /**
   * Attributes a particular revision to the config.
   *
   * @generated from field: string revision = 15;
   */
  revision: string;

  /**
   * @generated from field: optional viam.app.v1.MaintenanceConfig maintenance = 16;
   */
  maintenance?: MaintenanceConfig;

  /**
   * Disables the robot's log deduplication (identical, noisy logs will still
   * be output individually instead of aggregated.)
   *
   * @generated from field: bool disable_log_deduplication = 17;
   */
  disableLogDeduplication: boolean;

  constructor(data?: PartialMessage<RobotConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.RobotConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RobotConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RobotConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RobotConfig;

  static equals(a: RobotConfig | PlainMessage<RobotConfig> | undefined, b: RobotConfig | PlainMessage<RobotConfig> | undefined): boolean;
}

/**
 * LogPatternConfig allows you to specify a 2-tuple consisting
 * of a logger name and its corresponding log level.
 *
 * @generated from message viam.app.v1.LogPatternConfig
 */
export declare class LogPatternConfig extends Message<LogPatternConfig> {
  /**
   * @generated from field: string pattern = 1;
   */
  pattern: string;

  /**
   * @generated from field: string level = 2;
   */
  level: string;

  constructor(data?: PartialMessage<LogPatternConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.LogPatternConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogPatternConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogPatternConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogPatternConfig;

  static equals(a: LogPatternConfig | PlainMessage<LogPatternConfig> | undefined, b: LogPatternConfig | PlainMessage<LogPatternConfig> | undefined): boolean;
}

/**
 * Valid location secret that can be used for authentication to the robot.
 *
 * @generated from message viam.app.v1.LocationSecret
 */
export declare class LocationSecret extends Message<LocationSecret> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * secret payload
   *
   * @generated from field: string secret = 2;
   */
  secret: string;

  constructor(data?: PartialMessage<LocationSecret>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.LocationSecret";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationSecret;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationSecret;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationSecret;

  static equals(a: LocationSecret | PlainMessage<LocationSecret> | undefined, b: LocationSecret | PlainMessage<LocationSecret> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.AppValidationStatus
 */
export declare class AppValidationStatus extends Message<AppValidationStatus> {
  /**
   * @generated from field: string error = 1;
   */
  error: string;

  constructor(data?: PartialMessage<AppValidationStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.AppValidationStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppValidationStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppValidationStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppValidationStatus;

  static equals(a: AppValidationStatus | PlainMessage<AppValidationStatus> | undefined, b: AppValidationStatus | PlainMessage<AppValidationStatus> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.CloudConfig
 */
export declare class CloudConfig extends Message<CloudConfig> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string fqdn = 2;
   */
  fqdn: string;

  /**
   * @generated from field: string local_fqdn = 3;
   */
  localFqdn: string;

  /**
   * @generated from field: string managed_by = 4;
   */
  managedBy: string;

  /**
   * @generated from field: string signaling_address = 5;
   */
  signalingAddress: string;

  /**
   * @generated from field: bool signaling_insecure = 6;
   */
  signalingInsecure: boolean;

  /**
   * Deprecated use location_secrets
   *
   * @generated from field: string location_secret = 7 [deprecated = true];
   * @deprecated
   */
  locationSecret: string;

  /**
   * Robot part secret
   *
   * @generated from field: string secret = 8;
   */
  secret: string;

  /**
   * All valid location secrets.
   *
   * @generated from field: repeated viam.app.v1.LocationSecret location_secrets = 9;
   */
  locationSecrets: LocationSecret[];

  /**
   * @generated from field: string primary_org_id = 10;
   */
  primaryOrgId: string;

  /**
   * @generated from field: string location_id = 11;
   */
  locationId: string;

  /**
   * @generated from field: string machine_id = 12;
   */
  machineId: string;

  constructor(data?: PartialMessage<CloudConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.CloudConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloudConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloudConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloudConfig;

  static equals(a: CloudConfig | PlainMessage<CloudConfig> | undefined, b: CloudConfig | PlainMessage<CloudConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.ComponentConfig
 */
export declare class ComponentConfig extends Message<ComponentConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * deprecated; use api
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * deprecated; use api
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: string model = 4;
   */
  model: string;

  /**
   * @generated from field: viam.app.v1.Frame frame = 5;
   */
  frame?: Frame;

  /**
   * @generated from field: repeated string depends_on = 6;
   */
  dependsOn: string[];

  /**
   * @generated from field: repeated viam.app.v1.ResourceLevelServiceConfig service_configs = 7;
   */
  serviceConfigs: ResourceLevelServiceConfig[];

  /**
   * @generated from field: google.protobuf.Struct attributes = 8;
   */
  attributes?: Struct;

  /**
   * @generated from field: string api = 9;
   */
  api: string;

  /**
   * @generated from field: viam.app.v1.LogConfiguration log_configuration = 10;
   */
  logConfiguration?: LogConfiguration;

  constructor(data?: PartialMessage<ComponentConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ComponentConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentConfig;

  static equals(a: ComponentConfig | PlainMessage<ComponentConfig> | undefined, b: ComponentConfig | PlainMessage<ComponentConfig> | undefined): boolean;
}

/**
 * A ResourceLevelServiceConfig describes component or remote configuration for a service.
 *
 * @generated from message viam.app.v1.ResourceLevelServiceConfig
 */
export declare class ResourceLevelServiceConfig extends Message<ResourceLevelServiceConfig> {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * TODO(adam): Should this be move to a structured type as defined in the typescript frontend.
   *
   * @generated from field: google.protobuf.Struct attributes = 2;
   */
  attributes?: Struct;

  constructor(data?: PartialMessage<ResourceLevelServiceConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ResourceLevelServiceConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceLevelServiceConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceLevelServiceConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceLevelServiceConfig;

  static equals(a: ResourceLevelServiceConfig | PlainMessage<ResourceLevelServiceConfig> | undefined, b: ResourceLevelServiceConfig | PlainMessage<ResourceLevelServiceConfig> | undefined): boolean;
}

/**
 * A ProcessConfig describes how to manage a system process.
 *
 * @generated from message viam.app.v1.ProcessConfig
 */
export declare class ProcessConfig extends Message<ProcessConfig> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * @generated from field: string cwd = 4;
   */
  cwd: string;

  /**
   * @generated from field: bool one_shot = 5;
   */
  oneShot: boolean;

  /**
   * @generated from field: bool log = 6;
   */
  log: boolean;

  /**
   * @generated from field: int32 stop_signal = 7;
   */
  stopSignal: number;

  /**
   * @generated from field: google.protobuf.Duration stop_timeout = 8;
   */
  stopTimeout?: Duration;

  /**
   * additional environment variables passed to the process
   *
   * @generated from field: map<string, string> env = 9;
   */
  env: { [key: string]: string };

  /**
   * @generated from field: string username = 10;
   */
  username: string;

  constructor(data?: PartialMessage<ProcessConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ProcessConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessConfig;

  static equals(a: ProcessConfig | PlainMessage<ProcessConfig> | undefined, b: ProcessConfig | PlainMessage<ProcessConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.ServiceConfig
 */
export declare class ServiceConfig extends Message<ServiceConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * deprecated; use api
   *
   * @generated from field: string namespace = 2;
   */
  namespace: string;

  /**
   * deprecated; use api
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * @generated from field: google.protobuf.Struct attributes = 4;
   */
  attributes?: Struct;

  /**
   * @generated from field: repeated string depends_on = 5;
   */
  dependsOn: string[];

  /**
   * @generated from field: string model = 6;
   */
  model: string;

  /**
   * @generated from field: string api = 9;
   */
  api: string;

  /**
   * @generated from field: repeated viam.app.v1.ResourceLevelServiceConfig service_configs = 10;
   */
  serviceConfigs: ResourceLevelServiceConfig[];

  /**
   * @generated from field: viam.app.v1.LogConfiguration log_configuration = 11;
   */
  logConfiguration?: LogConfiguration;

  constructor(data?: PartialMessage<ServiceConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ServiceConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceConfig;

  static equals(a: ServiceConfig | PlainMessage<ServiceConfig> | undefined, b: ServiceConfig | PlainMessage<ServiceConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.NetworkConfig
 */
export declare class NetworkConfig extends Message<NetworkConfig> {
  /**
   * @generated from field: string fqdn = 1;
   */
  fqdn: string;

  /**
   * @generated from field: string bind_address = 2;
   */
  bindAddress: string;

  /**
   * @generated from field: string tls_cert_file = 3;
   */
  tlsCertFile: string;

  /**
   * @generated from field: string tls_key_file = 4;
   */
  tlsKeyFile: string;

  /**
   * @generated from field: viam.app.v1.SessionsConfig sessions = 5;
   */
  sessions?: SessionsConfig;

  /**
   * @generated from field: repeated viam.app.v1.TrafficTunnelEndpoint traffic_tunnel_endpoints = 6;
   */
  trafficTunnelEndpoints: TrafficTunnelEndpoint[];

  constructor(data?: PartialMessage<NetworkConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.NetworkConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkConfig;

  static equals(a: NetworkConfig | PlainMessage<NetworkConfig> | undefined, b: NetworkConfig | PlainMessage<NetworkConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.SessionsConfig
 */
export declare class SessionsConfig extends Message<SessionsConfig> {
  /**
   * @generated from field: google.protobuf.Duration heartbeat_window = 1;
   */
  heartbeatWindow?: Duration;

  constructor(data?: PartialMessage<SessionsConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.SessionsConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SessionsConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SessionsConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SessionsConfig;

  static equals(a: SessionsConfig | PlainMessage<SessionsConfig> | undefined, b: SessionsConfig | PlainMessage<SessionsConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.TrafficTunnelEndpoint
 */
export declare class TrafficTunnelEndpoint extends Message<TrafficTunnelEndpoint> {
  /**
   * @generated from field: int32 port = 1;
   */
  port: number;

  /**
   * @generated from field: google.protobuf.Duration connection_timeout = 2;
   */
  connectionTimeout?: Duration;

  constructor(data?: PartialMessage<TrafficTunnelEndpoint>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.TrafficTunnelEndpoint";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrafficTunnelEndpoint;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrafficTunnelEndpoint;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrafficTunnelEndpoint;

  static equals(a: TrafficTunnelEndpoint | PlainMessage<TrafficTunnelEndpoint> | undefined, b: TrafficTunnelEndpoint | PlainMessage<TrafficTunnelEndpoint> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.AuthConfig
 */
export declare class AuthConfig extends Message<AuthConfig> {
  /**
   * @generated from field: repeated viam.app.v1.AuthHandlerConfig handlers = 1;
   */
  handlers: AuthHandlerConfig[];

  /**
   * @generated from field: repeated string tls_auth_entities = 2;
   */
  tlsAuthEntities: string[];

  /**
   * @generated from field: optional viam.app.v1.ExternalAuthConfig external_auth_config = 3;
   */
  externalAuthConfig?: ExternalAuthConfig;

  constructor(data?: PartialMessage<AuthConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.AuthConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthConfig;

  static equals(a: AuthConfig | PlainMessage<AuthConfig> | undefined, b: AuthConfig | PlainMessage<AuthConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.JWKSFile
 */
export declare class JWKSFile extends Message<JWKSFile> {
  /**
   * JSON Web Keys (JWKS) file as arbitary json.
   * See https://www.rfc-editor.org/rfc/rfc7517
   *
   * @generated from field: google.protobuf.Struct json = 1;
   */
  json?: Struct;

  constructor(data?: PartialMessage<JWKSFile>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.JWKSFile";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JWKSFile;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JWKSFile;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JWKSFile;

  static equals(a: JWKSFile | PlainMessage<JWKSFile> | undefined, b: JWKSFile | PlainMessage<JWKSFile> | undefined): boolean;
}

/**
 * ExternalAuthConfig describes how a viam managed robot can accept
 * credentials signed by the cloud app.
 *
 * @generated from message viam.app.v1.ExternalAuthConfig
 */
export declare class ExternalAuthConfig extends Message<ExternalAuthConfig> {
  /**
   * @generated from field: viam.app.v1.JWKSFile jwks = 1;
   */
  jwks?: JWKSFile;

  constructor(data?: PartialMessage<ExternalAuthConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ExternalAuthConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalAuthConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalAuthConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalAuthConfig;

  static equals(a: ExternalAuthConfig | PlainMessage<ExternalAuthConfig> | undefined, b: ExternalAuthConfig | PlainMessage<ExternalAuthConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.AuthHandlerConfig
 */
export declare class AuthHandlerConfig extends Message<AuthHandlerConfig> {
  /**
   * @generated from field: viam.app.v1.CredentialsType type = 1;
   */
  type: CredentialsType;

  /**
   * @generated from field: google.protobuf.Struct config = 5;
   */
  config?: Struct;

  constructor(data?: PartialMessage<AuthHandlerConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.AuthHandlerConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthHandlerConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthHandlerConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthHandlerConfig;

  static equals(a: AuthHandlerConfig | PlainMessage<AuthHandlerConfig> | undefined, b: AuthHandlerConfig | PlainMessage<AuthHandlerConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.Frame
 */
export declare class Frame extends Message<Frame> {
  /**
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * @generated from field: viam.app.v1.Translation translation = 2;
   */
  translation?: Translation;

  /**
   * @generated from field: viam.app.v1.Orientation orientation = 3;
   */
  orientation?: Orientation;

  /**
   * @generated from field: viam.common.v1.Geometry geometry = 4;
   */
  geometry?: Geometry;

  constructor(data?: PartialMessage<Frame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Frame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Frame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Frame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Frame;

  static equals(a: Frame | PlainMessage<Frame> | undefined, b: Frame | PlainMessage<Frame> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.LogConfiguration
 */
export declare class LogConfiguration extends Message<LogConfiguration> {
  /**
   * @generated from field: string level = 1;
   */
  level: string;

  constructor(data?: PartialMessage<LogConfiguration>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.LogConfiguration";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogConfiguration;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogConfiguration;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogConfiguration;

  static equals(a: LogConfiguration | PlainMessage<LogConfiguration> | undefined, b: LogConfiguration | PlainMessage<LogConfiguration> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.Translation
 */
export declare class Translation extends Message<Translation> {
  /**
   * @generated from field: double x = 1;
   */
  x: number;

  /**
   * @generated from field: double y = 2;
   */
  y: number;

  /**
   * @generated from field: double z = 3;
   */
  z: number;

  constructor(data?: PartialMessage<Translation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Translation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Translation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Translation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Translation;

  static equals(a: Translation | PlainMessage<Translation> | undefined, b: Translation | PlainMessage<Translation> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.Orientation
 */
export declare class Orientation extends Message<Orientation> {
  /**
   * @generated from oneof viam.app.v1.Orientation.type
   */
  type: {
    /**
     * @generated from field: viam.app.v1.Orientation.NoOrientation no_orientation = 1;
     */
    value: Orientation_NoOrientation;
    case: "noOrientation";
  } | {
    /**
     * @generated from field: viam.app.v1.Orientation.OrientationVectorRadians vector_radians = 2;
     */
    value: Orientation_OrientationVectorRadians;
    case: "vectorRadians";
  } | {
    /**
     * @generated from field: viam.app.v1.Orientation.OrientationVectorDegrees vector_degrees = 3;
     */
    value: Orientation_OrientationVectorDegrees;
    case: "vectorDegrees";
  } | {
    /**
     * @generated from field: viam.app.v1.Orientation.EulerAngles euler_angles = 4;
     */
    value: Orientation_EulerAngles;
    case: "eulerAngles";
  } | {
    /**
     * @generated from field: viam.app.v1.Orientation.AxisAngles axis_angles = 5;
     */
    value: Orientation_AxisAngles;
    case: "axisAngles";
  } | {
    /**
     * @generated from field: viam.app.v1.Orientation.Quaternion quaternion = 6;
     */
    value: Orientation_Quaternion;
    case: "quaternion";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Orientation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation;

  static equals(a: Orientation | PlainMessage<Orientation> | undefined, b: Orientation | PlainMessage<Orientation> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.Orientation.NoOrientation
 */
export declare class Orientation_NoOrientation extends Message<Orientation_NoOrientation> {
  constructor(data?: PartialMessage<Orientation_NoOrientation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.NoOrientation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_NoOrientation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_NoOrientation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_NoOrientation;

  static equals(a: Orientation_NoOrientation | PlainMessage<Orientation_NoOrientation> | undefined, b: Orientation_NoOrientation | PlainMessage<Orientation_NoOrientation> | undefined): boolean;
}

/**
 * OrientationVector containing ox, oy, oz, theta represents an orientation vector
 * Structured similarly to an angle axis, an orientation vector works differently. Rather than representing an orientation
 * with an arbitrary axis and a rotation around it from an origin, an orientation vector represents orientation
 * such that the ox/oy/oz components represent the point on the cartesian unit sphere at which your end effector is pointing
 * from the origin, and that unit vector forms an axis around which theta rotates. This means that incrementing/decrementing
 * theta will perform an in-line rotation of the end effector.
 * Theta is defined as rotation between two planes: the plane defined by the origin, the point (0,0,1), and the rx,ry,rz
 * point, and the plane defined by the origin, the rx,ry,rz point, and the new local Z axis. So if theta is kept at
 * zero as the north/south pole is circled, the Roll will correct itself to remain in-line.
 *
 * @generated from message viam.app.v1.Orientation.OrientationVectorRadians
 */
export declare class Orientation_OrientationVectorRadians extends Message<Orientation_OrientationVectorRadians> {
  /**
   * @generated from field: double theta = 1;
   */
  theta: number;

  /**
   * @generated from field: double x = 2;
   */
  x: number;

  /**
   * @generated from field: double y = 3;
   */
  y: number;

  /**
   * @generated from field: double z = 4;
   */
  z: number;

  constructor(data?: PartialMessage<Orientation_OrientationVectorRadians>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.OrientationVectorRadians";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_OrientationVectorRadians;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_OrientationVectorRadians;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_OrientationVectorRadians;

  static equals(a: Orientation_OrientationVectorRadians | PlainMessage<Orientation_OrientationVectorRadians> | undefined, b: Orientation_OrientationVectorRadians | PlainMessage<Orientation_OrientationVectorRadians> | undefined): boolean;
}

/**
 * OrientationVectorDegrees is the orientation vector between two objects, but expressed in degrees rather than radians.
 * Because protobuf Pose is in degrees, this is necessary.
 *
 * @generated from message viam.app.v1.Orientation.OrientationVectorDegrees
 */
export declare class Orientation_OrientationVectorDegrees extends Message<Orientation_OrientationVectorDegrees> {
  /**
   * @generated from field: double theta = 1;
   */
  theta: number;

  /**
   * @generated from field: double x = 2;
   */
  x: number;

  /**
   * @generated from field: double y = 3;
   */
  y: number;

  /**
   * @generated from field: double z = 4;
   */
  z: number;

  constructor(data?: PartialMessage<Orientation_OrientationVectorDegrees>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.OrientationVectorDegrees";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_OrientationVectorDegrees;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_OrientationVectorDegrees;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_OrientationVectorDegrees;

  static equals(a: Orientation_OrientationVectorDegrees | PlainMessage<Orientation_OrientationVectorDegrees> | undefined, b: Orientation_OrientationVectorDegrees | PlainMessage<Orientation_OrientationVectorDegrees> | undefined): boolean;
}

/**
 * EulerAngles are three angles (in radians) used to represent the rotation of an object in 3D Euclidean space
 * The Tait–Bryan angle formalism is used, with rotations around three distinct axes in the z-y′-x″ sequence.
 *
 * @generated from message viam.app.v1.Orientation.EulerAngles
 */
export declare class Orientation_EulerAngles extends Message<Orientation_EulerAngles> {
  /**
   * @generated from field: double roll = 1;
   */
  roll: number;

  /**
   * @generated from field: double pitch = 2;
   */
  pitch: number;

  /**
   * @generated from field: double yaw = 3;
   */
  yaw: number;

  constructor(data?: PartialMessage<Orientation_EulerAngles>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.EulerAngles";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_EulerAngles;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_EulerAngles;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_EulerAngles;

  static equals(a: Orientation_EulerAngles | PlainMessage<Orientation_EulerAngles> | undefined, b: Orientation_EulerAngles | PlainMessage<Orientation_EulerAngles> | undefined): boolean;
}

/**
 * See here for a thorough explanation: https://en.wikipedia.org/wiki/Axis%E2%80%93angle_representation
 * Basic explanation: Imagine a 3d cartesian grid centered at 0,0,0, and a sphere of radius 1 centered at
 * that same point. An orientation can be expressed by first specifying an axis, i.e. a line from the origin
 * to a point on that sphere, represented by (rx, ry, rz), and a rotation around that axis, theta.
 * These four numbers can be used as-is (R4), or they can be converted to R3, where theta is multiplied by each of
 * the unit sphere components to give a vector whose length is theta and whose direction is the original axis.
 * AxisAngles represents an R4 axis angle.
 *
 * @generated from message viam.app.v1.Orientation.AxisAngles
 */
export declare class Orientation_AxisAngles extends Message<Orientation_AxisAngles> {
  /**
   * @generated from field: double theta = 1;
   */
  theta: number;

  /**
   * @generated from field: double x = 2;
   */
  x: number;

  /**
   * @generated from field: double y = 3;
   */
  y: number;

  /**
   * @generated from field: double z = 4;
   */
  z: number;

  constructor(data?: PartialMessage<Orientation_AxisAngles>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.AxisAngles";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_AxisAngles;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_AxisAngles;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_AxisAngles;

  static equals(a: Orientation_AxisAngles | PlainMessage<Orientation_AxisAngles> | undefined, b: Orientation_AxisAngles | PlainMessage<Orientation_AxisAngles> | undefined): boolean;
}

/**
 * Quaternion is a float64 precision quaternion.
 *
 * @generated from message viam.app.v1.Orientation.Quaternion
 */
export declare class Orientation_Quaternion extends Message<Orientation_Quaternion> {
  /**
   * @generated from field: double w = 1;
   */
  w: number;

  /**
   * @generated from field: double x = 2;
   */
  x: number;

  /**
   * @generated from field: double y = 3;
   */
  y: number;

  /**
   * @generated from field: double z = 4;
   */
  z: number;

  constructor(data?: PartialMessage<Orientation_Quaternion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.Orientation.Quaternion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Orientation_Quaternion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Orientation_Quaternion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Orientation_Quaternion;

  static equals(a: Orientation_Quaternion | PlainMessage<Orientation_Quaternion> | undefined, b: Orientation_Quaternion | PlainMessage<Orientation_Quaternion> | undefined): boolean;
}

/**
 * A RemoteConfig describes a remote robot that should be integrated.
 * The Frame field defines how the "world" node of the remote robot should be reconciled with the "world" node of the
 * the current robot. All components of the remote robot who have Parent as "world" will be attached to the parent defined
 * in Frame, and with the given offset as well.
 *
 * @generated from message viam.app.v1.RemoteConfig
 */
export declare class RemoteConfig extends Message<RemoteConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string address = 2;
   */
  address: string;

  /**
   * @generated from field: viam.app.v1.Frame frame = 3;
   */
  frame?: Frame;

  /**
   * @generated from field: viam.app.v1.RemoteAuth auth = 4;
   */
  auth?: RemoteAuth;

  /**
   * @generated from field: string managed_by = 5;
   */
  managedBy: string;

  /**
   * @generated from field: bool insecure = 6;
   */
  insecure: boolean;

  /**
   * @generated from field: google.protobuf.Duration connection_check_interval = 7;
   */
  connectionCheckInterval?: Duration;

  /**
   * @generated from field: google.protobuf.Duration reconnect_interval = 8;
   */
  reconnectInterval?: Duration;

  /**
   * @generated from field: repeated viam.app.v1.ResourceLevelServiceConfig service_configs = 9;
   */
  serviceConfigs: ResourceLevelServiceConfig[];

  /**
   * Secret is a helper for a robot location secret.
   *
   * @generated from field: string secret = 10;
   */
  secret: string;

  constructor(data?: PartialMessage<RemoteConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.RemoteConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteConfig;

  static equals(a: RemoteConfig | PlainMessage<RemoteConfig> | undefined, b: RemoteConfig | PlainMessage<RemoteConfig> | undefined): boolean;
}

/**
 * RemoteAuth specifies how to authenticate against a remote. If no credentials are
 * specified, authentication does not happen. If an entity is specified, the
 * authentication request will specify it.
 *
 * @generated from message viam.app.v1.RemoteAuth
 */
export declare class RemoteAuth extends Message<RemoteAuth> {
  /**
   * @generated from field: viam.app.v1.RemoteAuth.Credentials credentials = 1;
   */
  credentials?: RemoteAuth_Credentials;

  /**
   * @generated from field: string entity = 2;
   */
  entity: string;

  constructor(data?: PartialMessage<RemoteAuth>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.RemoteAuth";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteAuth;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteAuth;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteAuth;

  static equals(a: RemoteAuth | PlainMessage<RemoteAuth> | undefined, b: RemoteAuth | PlainMessage<RemoteAuth> | undefined): boolean;
}

/**
 * Credentials packages up both a type of credential along with its payload which
 * is formatted specific to the type.
 *
 * @generated from message viam.app.v1.RemoteAuth.Credentials
 */
export declare class RemoteAuth_Credentials extends Message<RemoteAuth_Credentials> {
  /**
   * @generated from field: viam.app.v1.CredentialsType type = 1;
   */
  type: CredentialsType;

  /**
   * @generated from field: string payload = 2;
   */
  payload: string;

  constructor(data?: PartialMessage<RemoteAuth_Credentials>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.RemoteAuth.Credentials";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteAuth_Credentials;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteAuth_Credentials;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteAuth_Credentials;

  static equals(a: RemoteAuth_Credentials | PlainMessage<RemoteAuth_Credentials> | undefined, b: RemoteAuth_Credentials | PlainMessage<RemoteAuth_Credentials> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.AgentInfo
 */
export declare class AgentInfo extends Message<AgentInfo> {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * Will soon be deprecated, use platform instead
   *
   * @generated from field: string os = 2;
   */
  os: string;

  /**
   * list of all ipv4 ips.
   *
   * @generated from field: repeated string ips = 3;
   */
  ips: string[];

  /**
   * RDK version
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * @generated from field: string git_revision = 5;
   */
  gitRevision: string;

  /**
   * The platform the RDK is running on. For example linux/amd64
   *
   * @generated from field: optional string platform = 6;
   */
  platform?: string;

  /**
   * Optional tags to further constrain which artifact is returned for modules.
   *
   * @generated from field: repeated string platform_tags = 7;
   */
  platformTags: string[];

  constructor(data?: PartialMessage<AgentInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.AgentInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentInfo;

  static equals(a: AgentInfo | PlainMessage<AgentInfo> | undefined, b: AgentInfo | PlainMessage<AgentInfo> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.ConfigRequest
 */
export declare class ConfigRequest extends Message<ConfigRequest> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Details about the RDK (os, version) are updated during this request.
   *
   * @generated from field: optional viam.app.v1.AgentInfo agent_info = 2;
   */
  agentInfo?: AgentInfo;

  constructor(data?: PartialMessage<ConfigRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ConfigRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRequest;

  static equals(a: ConfigRequest | PlainMessage<ConfigRequest> | undefined, b: ConfigRequest | PlainMessage<ConfigRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.ConfigResponse
 */
export declare class ConfigResponse extends Message<ConfigResponse> {
  /**
   * @generated from field: viam.app.v1.RobotConfig config = 1;
   */
  config?: RobotConfig;

  constructor(data?: PartialMessage<ConfigResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ConfigResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigResponse;

  static equals(a: ConfigResponse | PlainMessage<ConfigResponse> | undefined, b: ConfigResponse | PlainMessage<ConfigResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.CertificateRequest
 */
export declare class CertificateRequest extends Message<CertificateRequest> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<CertificateRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.CertificateRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateRequest;

  static equals(a: CertificateRequest | PlainMessage<CertificateRequest> | undefined, b: CertificateRequest | PlainMessage<CertificateRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.CertificateResponse
 */
export declare class CertificateResponse extends Message<CertificateResponse> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string tls_certificate = 2;
   */
  tlsCertificate: string;

  /**
   * @generated from field: string tls_private_key = 3;
   */
  tlsPrivateKey: string;

  constructor(data?: PartialMessage<CertificateResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.CertificateResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertificateResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertificateResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertificateResponse;

  static equals(a: CertificateResponse | PlainMessage<CertificateResponse> | undefined, b: CertificateResponse | PlainMessage<CertificateResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.LogRequest
 */
export declare class LogRequest extends Message<LogRequest> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: repeated viam.common.v1.LogEntry logs = 2;
   */
  logs: LogEntry[];

  constructor(data?: PartialMessage<LogRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.LogRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRequest;

  static equals(a: LogRequest | PlainMessage<LogRequest> | undefined, b: LogRequest | PlainMessage<LogRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.LogResponse
 */
export declare class LogResponse extends Message<LogResponse> {
  constructor(data?: PartialMessage<LogResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.LogResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogResponse;

  static equals(a: LogResponse | PlainMessage<LogResponse> | undefined, b: LogResponse | PlainMessage<LogResponse> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.NeedsRestartRequest
 */
export declare class NeedsRestartRequest extends Message<NeedsRestartRequest> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  constructor(data?: PartialMessage<NeedsRestartRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.NeedsRestartRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NeedsRestartRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NeedsRestartRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NeedsRestartRequest;

  static equals(a: NeedsRestartRequest | PlainMessage<NeedsRestartRequest> | undefined, b: NeedsRestartRequest | PlainMessage<NeedsRestartRequest> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.NeedsRestartResponse
 */
export declare class NeedsRestartResponse extends Message<NeedsRestartResponse> {
  /**
   * Robot part id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool must_restart = 2;
   */
  mustRestart: boolean;

  /**
   * @generated from field: google.protobuf.Duration restart_check_interval = 3;
   */
  restartCheckInterval?: Duration;

  constructor(data?: PartialMessage<NeedsRestartResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.NeedsRestartResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NeedsRestartResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NeedsRestartResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NeedsRestartResponse;

  static equals(a: NeedsRestartResponse | PlainMessage<NeedsRestartResponse> | undefined, b: NeedsRestartResponse | PlainMessage<NeedsRestartResponse> | undefined): boolean;
}

/**
 * ModuleConfig is the configuration for a module.
 *
 * @generated from message viam.app.v1.ModuleConfig
 */
export declare class ModuleConfig extends Message<ModuleConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * path to the executable
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * log level for module
   *
   * @generated from field: string log_level = 3;
   */
  logLevel: string;

  /**
   * type of the module ("local" or "registry")
   *
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * the id of the module if it is a registry module
   *
   * @generated from field: string module_id = 5;
   */
  moduleId: string;

  /**
   * additional environment variables passed to the module process
   *
   * @generated from field: map<string, string> env = 6;
   */
  env: { [key: string]: string };

  /**
   * info about the validity of the module
   *
   * @generated from field: viam.app.v1.AppValidationStatus status = 7;
   */
  status?: AppValidationStatus;

  /**
   * timeout for first_run script
   *
   * @generated from field: google.protobuf.Duration first_run_timeout = 8;
   */
  firstRunTimeout?: Duration;

  constructor(data?: PartialMessage<ModuleConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.ModuleConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModuleConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModuleConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModuleConfig;

  static equals(a: ModuleConfig | PlainMessage<ModuleConfig> | undefined, b: ModuleConfig | PlainMessage<ModuleConfig> | undefined): boolean;
}

/**
 * PackageConfig is the configration for deployed Packages.
 *
 * @generated from message viam.app.v1.PackageConfig
 */
export declare class PackageConfig extends Message<PackageConfig> {
  /**
   * Name is the local name of the package on the RDK. Must be unique across Packages. Must not be empty.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Package is the unique package name hosted by Viam. Must not be empty.
   *
   * @generated from field: string package = 2;
   */
  package: string;

  /**
   * version of the package ID hosted by Viam. If not specified "latest" is assumed.
   *
   * @generated from field: string version = 3;
   */
  version: string;

  /**
   * type of the package
   *
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * info about the validity of the package
   *
   * @generated from field: viam.app.v1.AppValidationStatus status = 5;
   */
  status?: AppValidationStatus;

  constructor(data?: PartialMessage<PackageConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.PackageConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackageConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackageConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackageConfig;

  static equals(a: PackageConfig | PlainMessage<PackageConfig> | undefined, b: PackageConfig | PlainMessage<PackageConfig> | undefined): boolean;
}

/**
 * @generated from message viam.app.v1.MaintenanceConfig
 */
export declare class MaintenanceConfig extends Message<MaintenanceConfig> {
  /**
   * @generated from field: viam.common.v1.ResourceName sensor_name = 1;
   */
  sensorName?: ResourceName;

  /**
   * @generated from field: string maintenance_allowed_key = 2;
   */
  maintenanceAllowedKey: string;

  constructor(data?: PartialMessage<MaintenanceConfig>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viam.app.v1.MaintenanceConfig";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaintenanceConfig;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaintenanceConfig;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaintenanceConfig;

  static equals(a: MaintenanceConfig | PlainMessage<MaintenanceConfig> | undefined, b: MaintenanceConfig | PlainMessage<MaintenanceConfig> | undefined): boolean;
}

