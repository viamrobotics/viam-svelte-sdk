// @generated by protoc-gen-connect-es v1.5.0
// @generated from file service/motion/v1/motion.proto (package viam.service.motion.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetPlanRequest, GetPlanResponse, GetPoseRequest, GetPoseResponse, ListPlanStatusesRequest, ListPlanStatusesResponse, MoveOnGlobeRequest, MoveOnGlobeResponse, MoveOnMapRequest, MoveOnMapResponse, MoveRequest, MoveResponse, StopPlanRequest, StopPlanResponse } from "./motion_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse } from "../../../common/v1/common_pb.js";

/**
 * A MotionService declares the gRPC contract for a motion service
 *
 * @generated from service viam.service.motion.v1.MotionService
 */
export declare const MotionService: {
  readonly typeName: "viam.service.motion.v1.MotionService",
  readonly methods: {
    /**
     * @generated from rpc viam.service.motion.v1.MotionService.Move
     */
    readonly move: {
      readonly name: "Move",
      readonly I: typeof MoveRequest,
      readonly O: typeof MoveResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generate a plan and move a component to a specific pose
     * with respect to the SLAM map's origin.
     * May replan to avoid obstacles
     *
     * @generated from rpc viam.service.motion.v1.MotionService.MoveOnMap
     */
    readonly moveOnMap: {
      readonly name: "MoveOnMap",
      readonly I: typeof MoveOnMapRequest,
      readonly O: typeof MoveOnMapResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generate and begin executing an execution to move a component
     * to a specific GPS coordinate.
     * May replan to avoid obstacles & account for location drift.
     * Creates a new plan upon replanning.
     *
     * @generated from rpc viam.service.motion.v1.MotionService.MoveOnGlobe
     */
    readonly moveOnGlobe: {
      readonly name: "MoveOnGlobe",
      readonly I: typeof MoveOnGlobeRequest,
      readonly O: typeof MoveOnGlobeResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc viam.service.motion.v1.MotionService.GetPose
     */
    readonly getPose: {
      readonly name: "GetPose",
      readonly I: typeof GetPoseRequest,
      readonly O: typeof GetPoseResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Stops a Plan
     *
     * @generated from rpc viam.service.motion.v1.MotionService.StopPlan
     */
    readonly stopPlan: {
      readonly name: "StopPlan",
      readonly I: typeof StopPlanRequest,
      readonly O: typeof StopPlanResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the status of plans created by requests to move components
     * that are executing OR are part of an execution which changed it state
     * within the a 24HR TTL OR until the robot reinitializes.
     * This currently only returns plans for MoveOnGlobe and MoveOnMap.
     *
     * @generated from rpc viam.service.motion.v1.MotionService.ListPlanStatuses
     */
    readonly listPlanStatuses: {
      readonly name: "ListPlanStatuses",
      readonly I: typeof ListPlanStatusesRequest,
      readonly O: typeof ListPlanStatusesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the plan(s) & state history of the most recent execution to move a
     * component. Returns a result if the last execution is still executing OR
     * changed state within the last 24 hours AND the robot has not reinitialized.
     * Plans are never mutated.
     * Replans always create new plans.
     * Replans share the execution_id of the previously executing plan.
     * This currently only returns plans for MoveOnGlobe and MoveOnMap.
     *
     * @generated from rpc viam.service.motion.v1.MotionService.GetPlan
     */
    readonly getPlan: {
      readonly name: "GetPlan",
      readonly I: typeof GetPlanRequest,
      readonly O: typeof GetPlanResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.service.motion.v1.MotionService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

