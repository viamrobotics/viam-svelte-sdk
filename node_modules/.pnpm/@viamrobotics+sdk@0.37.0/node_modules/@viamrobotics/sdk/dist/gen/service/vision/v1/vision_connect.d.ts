// @generated by protoc-gen-connect-es v1.5.0
// @generated from file service/vision/v1/vision.proto (package viam.service.vision.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CaptureAllFromCameraRequest, CaptureAllFromCameraResponse, GetClassificationsFromCameraRequest, GetClassificationsFromCameraResponse, GetClassificationsRequest, GetClassificationsResponse, GetDetectionsFromCameraRequest, GetDetectionsFromCameraResponse, GetDetectionsRequest, GetDetectionsResponse, GetObjectPointCloudsRequest, GetObjectPointCloudsResponse, GetPropertiesRequest, GetPropertiesResponse } from "./vision_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse } from "../../../common/v1/common_pb.js";

/**
 * VisionService declares the gRPC contract for a vision service
 *
 * @generated from service viam.service.vision.v1.VisionService
 */
export declare const VisionService: {
  readonly typeName: "viam.service.vision.v1.VisionService",
  readonly methods: {
    /**
     * GetDetectionsFromCamera will return a list of detections in the next image given a camera and a detector
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetDetectionsFromCamera
     */
    readonly getDetectionsFromCamera: {
      readonly name: "GetDetectionsFromCamera",
      readonly I: typeof GetDetectionsFromCameraRequest,
      readonly O: typeof GetDetectionsFromCameraResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetDetections will return a list of detections in the next image given the image bytes and a detector
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetDetections
     */
    readonly getDetections: {
      readonly name: "GetDetections",
      readonly I: typeof GetDetectionsRequest,
      readonly O: typeof GetDetectionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetClassificationsFromCamera will return a list of classifications in the next image given a camera and a classifier
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetClassificationsFromCamera
     */
    readonly getClassificationsFromCamera: {
      readonly name: "GetClassificationsFromCamera",
      readonly I: typeof GetClassificationsFromCameraRequest,
      readonly O: typeof GetClassificationsFromCameraResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetClassifications will return a list of classifications in the next image given the image bytes and a classifier
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetClassifications
     */
    readonly getClassifications: {
      readonly name: "GetClassifications",
      readonly I: typeof GetClassificationsRequest,
      readonly O: typeof GetClassificationsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetObjectPointClouds returns all the found objects in a pointcloud from a camera of the underlying robot,
     * as well as the 3-vector center of each of the found objects.
     * A specific MIME type can be requested but may not necessarily be the same one returned.
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetObjectPointClouds
     */
    readonly getObjectPointClouds: {
      readonly name: "GetObjectPointClouds",
      readonly I: typeof GetObjectPointCloudsRequest,
      readonly O: typeof GetObjectPointCloudsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetProperties will return the properties as booleans given the name of the vision service
     *
     * @generated from rpc viam.service.vision.v1.VisionService.GetProperties
     */
    readonly getProperties: {
      readonly name: "GetProperties",
      readonly I: typeof GetPropertiesRequest,
      readonly O: typeof GetPropertiesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc viam.service.vision.v1.VisionService.CaptureAllFromCamera
     */
    readonly captureAllFromCamera: {
      readonly name: "CaptureAllFromCamera",
      readonly I: typeof CaptureAllFromCameraRequest,
      readonly O: typeof CaptureAllFromCameraResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.service.vision.v1.VisionService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

