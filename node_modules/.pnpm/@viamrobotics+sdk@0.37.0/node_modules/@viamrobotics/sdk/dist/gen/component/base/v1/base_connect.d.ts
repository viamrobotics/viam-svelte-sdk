// @generated by protoc-gen-connect-es v1.5.0
// @generated from file component/base/v1/base.proto (package viam.component.base.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetPropertiesRequest, GetPropertiesResponse, IsMovingRequest, IsMovingResponse, MoveStraightRequest, MoveStraightResponse, SetPowerRequest, SetPowerResponse, SetVelocityRequest, SetVelocityResponse, SpinRequest, SpinResponse, StopRequest, StopResponse } from "./base_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse, GetGeometriesRequest, GetGeometriesResponse } from "../../../common/v1/common_pb.js";

/**
 * @generated from service viam.component.base.v1.BaseService
 */
export declare const BaseService: {
  readonly typeName: "viam.component.base.v1.BaseService",
  readonly methods: {
    /**
     * MoveStraight moves a robot's base in a straight line by a given distance, expressed in millimeters
     * and a given speed, expressed in millimeters per second
     * This method blocks until completed or cancelled
     *
     * @generated from rpc viam.component.base.v1.BaseService.MoveStraight
     */
    readonly moveStraight: {
      readonly name: "MoveStraight",
      readonly I: typeof MoveStraightRequest,
      readonly O: typeof MoveStraightResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Spin spins a robot's base by an given angle, expressed in degrees, and a given
     * angular speed, expressed in degrees per second
     * This method blocks until completed or cancelled
     *
     * @generated from rpc viam.component.base.v1.BaseService.Spin
     */
    readonly spin: {
      readonly name: "Spin",
      readonly I: typeof SpinRequest,
      readonly O: typeof SpinResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetPower sets the linear and angular power of a base
     * -1 -> 1 in terms of power for each direction
     *
     * @generated from rpc viam.component.base.v1.BaseService.SetPower
     */
    readonly setPower: {
      readonly name: "SetPower",
      readonly I: typeof SetPowerRequest,
      readonly O: typeof SetPowerResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * SetVelocity sets the linear and angular velocity of a base
     *
     * @generated from rpc viam.component.base.v1.BaseService.SetVelocity
     */
    readonly setVelocity: {
      readonly name: "SetVelocity",
      readonly I: typeof SetVelocityRequest,
      readonly O: typeof SetVelocityResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Stop stops a robot's base
     *
     * @generated from rpc viam.component.base.v1.BaseService.Stop
     */
    readonly stop: {
      readonly name: "Stop",
      readonly I: typeof StopRequest,
      readonly O: typeof StopResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * IsMoving reports if a component is in motion
     *
     * @generated from rpc viam.component.base.v1.BaseService.IsMoving
     */
    readonly isMoving: {
      readonly name: "IsMoving",
      readonly I: typeof IsMovingRequest,
      readonly O: typeof IsMovingResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.component.base.v1.BaseService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGeometries returns the geometries of the component in their current configuration
     *
     * @generated from rpc viam.component.base.v1.BaseService.GetGeometries
     */
    readonly getGeometries: {
      readonly name: "GetGeometries",
      readonly I: typeof GetGeometriesRequest,
      readonly O: typeof GetGeometriesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetProperties returns the properties of a base in its current configuration
     *
     * @generated from rpc viam.component.base.v1.BaseService.GetProperties
     */
    readonly getProperties: {
      readonly name: "GetProperties",
      readonly I: typeof GetPropertiesRequest,
      readonly O: typeof GetPropertiesResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

