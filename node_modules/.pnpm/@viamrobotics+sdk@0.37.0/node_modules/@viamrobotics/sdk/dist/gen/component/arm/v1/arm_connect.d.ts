// @generated by protoc-gen-connect-es v1.5.0
// @generated from file component/arm/v1/arm.proto (package viam.component.arm.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetEndPositionRequest, GetEndPositionResponse, GetJointPositionsRequest, GetJointPositionsResponse, IsMovingRequest, IsMovingResponse, MoveThroughJointPositionsRequest, MoveThroughJointPositionsResponse, MoveToJointPositionsRequest, MoveToJointPositionsResponse, MoveToPositionRequest, MoveToPositionResponse, StopRequest, StopResponse } from "./arm_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { DoCommandRequest, DoCommandResponse, GetGeometriesRequest, GetGeometriesResponse, GetKinematicsRequest, GetKinematicsResponse } from "../../../common/v1/common_pb.js";

/**
 * An ArmService services all arms associated with a robot
 *
 * @generated from service viam.component.arm.v1.ArmService
 */
export declare const ArmService: {
  readonly typeName: "viam.component.arm.v1.ArmService",
  readonly methods: {
    /**
     * GetEndPosition gets the current position the end of the robot's arm expressed as X,Y,Z,ox,oy,oz,theta
     *
     * @generated from rpc viam.component.arm.v1.ArmService.GetEndPosition
     */
    readonly getEndPosition: {
      readonly name: "GetEndPosition",
      readonly I: typeof GetEndPositionRequest,
      readonly O: typeof GetEndPositionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * MoveToPosition moves the mount point of the robot's end effector to the requested position.
     * This will block until done or a new operation cancels this one
     *
     * @generated from rpc viam.component.arm.v1.ArmService.MoveToPosition
     */
    readonly moveToPosition: {
      readonly name: "MoveToPosition",
      readonly I: typeof MoveToPositionRequest,
      readonly O: typeof MoveToPositionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetJointPositions lists the joint positions (in degrees) of every joint on a robot
     *
     * @generated from rpc viam.component.arm.v1.ArmService.GetJointPositions
     */
    readonly getJointPositions: {
      readonly name: "GetJointPositions",
      readonly I: typeof GetJointPositionsRequest,
      readonly O: typeof GetJointPositionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * MoveToJointPositions moves every joint on a robot's arm to specified angles which are expressed in degrees
     * This will block until done or a new operation cancels this one
     *
     * @generated from rpc viam.component.arm.v1.ArmService.MoveToJointPositions
     */
    readonly moveToJointPositions: {
      readonly name: "MoveToJointPositions",
      readonly I: typeof MoveToJointPositionsRequest,
      readonly O: typeof MoveToJointPositionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * MoveThroughJointPositions moves every joint on a robot's arm to the specified JointPositions in the order they are specified,
     * obeying the specified velocity and acceleration limits.
     * This will block until done or a new operation cancels this one
     *
     * @generated from rpc viam.component.arm.v1.ArmService.MoveThroughJointPositions
     */
    readonly moveThroughJointPositions: {
      readonly name: "MoveThroughJointPositions",
      readonly I: typeof MoveThroughJointPositionsRequest,
      readonly O: typeof MoveThroughJointPositionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Stop stops a robot's arm
     *
     * @generated from rpc viam.component.arm.v1.ArmService.Stop
     */
    readonly stop: {
      readonly name: "Stop",
      readonly I: typeof StopRequest,
      readonly O: typeof StopResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * IsMoving reports if a component is in motion
     *
     * @generated from rpc viam.component.arm.v1.ArmService.IsMoving
     */
    readonly isMoving: {
      readonly name: "IsMoving",
      readonly I: typeof IsMovingRequest,
      readonly O: typeof IsMovingResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * DoCommand sends/receives arbitrary commands
     *
     * @generated from rpc viam.component.arm.v1.ArmService.DoCommand
     */
    readonly doCommand: {
      readonly name: "DoCommand",
      readonly I: typeof DoCommandRequest,
      readonly O: typeof DoCommandResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetKinematics returns the kinematics file for the component
     *
     * @generated from rpc viam.component.arm.v1.ArmService.GetKinematics
     */
    readonly getKinematics: {
      readonly name: "GetKinematics",
      readonly I: typeof GetKinematicsRequest,
      readonly O: typeof GetKinematicsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetGeometries returns the geometries of the component in their current configuration
     *
     * @generated from rpc viam.component.arm.v1.ArmService.GetGeometries
     */
    readonly getGeometries: {
      readonly name: "GetGeometries",
      readonly I: typeof GetGeometriesRequest,
      readonly O: typeof GetGeometriesResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

