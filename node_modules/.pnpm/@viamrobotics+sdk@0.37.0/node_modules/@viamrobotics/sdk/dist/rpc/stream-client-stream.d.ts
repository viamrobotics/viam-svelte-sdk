import type { Message, PartialMessage } from '@bufbuild/protobuf';
import type { ContextValues, StreamResponse } from '@connectrpc/connect';
import { ResponseHeaders, ResponseTrailers } from '../gen/proto/rpc/webrtc/v1/grpc_pb';
import { ClientStream } from './client-stream';
export declare class StreamClientStream<I extends Message<I>, O extends Message<O>> extends ClientStream<I, O> {
    private awaitingHeadersResult?;
    private gotHeaders;
    private readonly respStream;
    private readonly trailers;
    private respStreamQueue?;
    run(signal: AbortSignal | undefined, timeoutMs: number | undefined, input: AsyncIterable<PartialMessage<I>>, contextValues?: ContextValues): Promise<StreamResponse<I, O>>;
    protected sendMessages(messages: AsyncIterable<I>): Promise<void>;
    protected onHeaders(respHeaders: ResponseHeaders): void;
    protected onTrailers(respTrailers: ResponseTrailers): void;
    protected onMessage(msgBytes: Uint8Array): void;
}
