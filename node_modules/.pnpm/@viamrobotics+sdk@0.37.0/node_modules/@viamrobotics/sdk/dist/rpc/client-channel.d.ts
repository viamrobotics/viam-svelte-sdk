import type { AnyMessage, Message, MethodInfo, PartialMessage, ServiceType } from '@bufbuild/protobuf';
import type { ContextValues, StreamResponse, Transport, UnaryResponse } from '@connectrpc/connect';
import { RequestHeaders, RequestMessage, Stream } from '../gen/proto/rpc/webrtc/v1/grpc_pb';
import { BaseChannel } from './base-channel';
export declare class ClientChannel extends BaseChannel implements Transport {
    private streamIDCounter;
    private readonly streams;
    constructor(pc: RTCPeerConnection, dc: RTCDataChannel);
    private onConnectionTerminated;
    private onChannelMessage;
    private nextStreamID;
    private newStream;
    private removeStreamByID;
    writeHeaders(stream: Stream, headers: RequestHeaders): void;
    writeMessage(stream: Stream, msg: RequestMessage): void;
    writeReset(stream: Stream): void;
    unary<I extends Message<I> = AnyMessage, O extends Message<O> = AnyMessage>(service: ServiceType, method: MethodInfo<I, O>, signal: AbortSignal | undefined, timeoutMs: number | undefined, header: HeadersInit | undefined, message: PartialMessage<I>, contextValues?: ContextValues): Promise<UnaryResponse<I, O>>;
    stream<I extends Message<I> = AnyMessage, O extends Message<O> = AnyMessage>(service: ServiceType, method: MethodInfo<I, O>, signal: AbortSignal | undefined, timeoutMs: number | undefined, header: HeadersInit | undefined, input: AsyncIterable<PartialMessage<I>>, contextValues?: ContextValues): Promise<StreamResponse<I, O>>;
}
