import { Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import type { RobotClient } from '../../robot';
import type { GeoGeometry, GeoPoint, Geometry, Options, Pose, PoseInFrame, ResourceName, Transform, WorldState } from '../../types';
import type { Motion } from './motion';
import { type Constraints, type MotionConfiguration } from './types';
/**
 * A gRPC-web client for a Motion service.
 *
 * @group Clients
 */
export declare class MotionClient implements Motion {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    move(destination: PoseInFrame, componentName: ResourceName, worldState?: WorldState, constraints?: Constraints, extra?: {}, callOptions?: CallOptions): Promise<boolean>;
    moveOnMap(destination: Pose, componentName: ResourceName, slamServiceName: ResourceName, motionConfig?: MotionConfiguration, obstacles?: Geometry[], extra?: {}, callOptions?: CallOptions): Promise<string>;
    moveOnGlobe(destination: GeoPoint, componentName: ResourceName, movementSensorName: ResourceName, heading?: number, obstaclesList?: GeoGeometry[], motionConfig?: MotionConfiguration, boundingRegionsList?: GeoGeometry[], extra?: {}, callOptions?: CallOptions): Promise<string>;
    stopPlan(componentName: ResourceName, extra?: {}, callOptions?: CallOptions): Promise<null>;
    getPlan(componentName: ResourceName, lastPlanOnly?: boolean, executionId?: string, extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/motion/v1/motion_pb").GetPlanResponse>;
    listPlanStatuses(onlyActivePlans?: boolean, extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/motion/v1/motion_pb").ListPlanStatusesResponse>;
    getPose(componentName: ResourceName, destinationFrame: string, supplementalTransforms: Transform[], extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").PoseInFrame>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
