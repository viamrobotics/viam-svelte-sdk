import { Struct, type JsonValue } from '@bufbuild/protobuf';
import type { CallOptions } from '@connectrpc/connect';
import { RobotClient } from '../../robot';
import type { GeoPoint, Options } from '../../types';
import type { Navigation } from './navigation';
import type { Mode } from './types';
/**
 * A gRPC-web client for a Navigation service.
 *
 * @group Clients
 */
export declare class NavigationClient implements Navigation {
    private client;
    readonly name: string;
    private readonly options;
    callOptions: CallOptions;
    constructor(client: RobotClient, name: string, options?: Options);
    getMode(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/navigation/v1/navigation_pb").Mode>;
    setMode(mode: Mode, extra?: {}, callOptions?: CallOptions): Promise<void>;
    getLocation(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/navigation/v1/navigation_pb").GetLocationResponse>;
    getWayPoints(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/navigation/v1/navigation_pb").Waypoint[]>;
    addWayPoint(location: GeoPoint, extra?: {}, callOptions?: CallOptions): Promise<void>;
    removeWayPoint(id: string, extra?: {}, callOptions?: CallOptions): Promise<void>;
    getObstacles(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/common/v1/common_pb").GeoGeometry[]>;
    getPaths(extra?: {}, callOptions?: CallOptions): Promise<import("../../gen/service/navigation/v1/navigation_pb").Path[]>;
    getProperties(callOptions?: CallOptions): Promise<import("../../gen/service/navigation/v1/navigation_pb").GetPropertiesResponse>;
    doCommand(command: Struct, callOptions?: CallOptions): Promise<JsonValue>;
}
